{
    "rules": [
      {
        "id": "PY001",
        "description": "Hardcoded secret key.",
        "pattern": "secret_key\\s*=\\s*['\"]",
        "severity": "high",
        "recommendation": "Store secret keys in environment variables."
      },
      {
        "id": "PY002",
        "description": "SQL Injection vulnerability.",
        "pattern": "cursor\\.execute\\(f?\"SELECT \\* FROM [a-zA-Z_]+ WHERE [a-zA-Z_]+ = '.*'\"\\)",
        "severity": "high",
        "recommendation": "Use parameterized queries to prevent SQL injection."
      },
      {
        "id": "PY003",
        "description": "Command Injection vulnerability.",
        "pattern": "os\\.system\\(",
        "severity": "high",
        "recommendation": "Use subprocess.run() with a list of arguments to prevent command injection."
      },
      {
        "id": "PY004",
        "description": "Hardcoded password.",
        "pattern": "db_password\\s*=\\s*['\"]",
        "severity": "high",
        "recommendation": "Store passwords in environment variables or secure vaults."
      },
      {
        "id": "PY005",
        "description": "Weak cryptographic hash.",
        "pattern": "hashlib\\.md5\\(",
        "severity": "medium",
        "recommendation": "Use a stronger hash algorithm like SHA-256."
      },
      {
        "id": "PY006",
        "description": "Insecure file permissions.",
        "pattern": "with open\\(['\"][a-zA-Z_]+\\.txt['\"],\\s*['\"]w['\"]\\)",
        "severity": "medium",
        "recommendation": "Ensure that files containing sensitive data have restricted permissions."
      },
      {
        "id": "PY007",
        "description": "Path traversal vulnerability.",
        "pattern": "with open\\(file_path,\\s*['\"]r['\"]\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize file paths to prevent path traversal."
      },
      {
        "id": "PY008",
        "description": "Unvalidated redirect.",
        "pattern": "redirect\\(url\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize URLs to prevent unvalidated redirects."
      },
     
      {
        "id": "PY009",
        "description": "Detect use of os.system() for command execution",
        "pattern": "\\bos\\.system\\s*\\(",
        "severity": "high",
        "recommendation": "Avoid using os.system() for command execution as it can lead to command injection vulnerabilities. Consider using subprocess.run() with appropriate arguments."
      },

      {
        "id": "PY010",
        "description": "Detect use of subprocess with shell=True",
        "pattern": "\\bsubprocess\\.(run|Popen|call|check_output)\\s*\\(.*shell\\s*=\\s*True",
        "severity": "high",
        "recommendation": "Avoid using shell=True in subprocess calls to prevent command injection. Use list arguments for subprocess functions."
      },
      {
        "id": "PY011",
        "description": "Detect potential XSS in Django template context",
        "pattern": "\\bcontext\\s*=\\s*\\{.*\\}",
        "severity": "medium",
        "recommendation": "Ensure all user input included in Django template context is properly sanitized or escaped."
      },
      {
        "id": "PY012",
        "description": "Detect potential CSRF vulnerability in Flask forms",
        "pattern": "form\\.validate_on_submit\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure CSRF protection is enabled in Flask forms by using Flask-WTF or similar libraries."
      },
      {
        "id": "PY013",
        "description": "Detect use of flask_login with insecure remember me cookie",
        "pattern": "\\blogin_user\\s*\\(.*remember\\s*=\\s*True",
        "severity": "high",
        "recommendation": "Ensure the remember me cookie is properly secured by setting a strong secret key and using HTTPS."
      },
      {
        "id": "PY014",
        "description": "Detect potential directory traversal in Flask send_file",
        "pattern": "send_file\\s*\\(\\s*request\\.args\\.get\\s*\\(",
        "severity": "high",
        "recommendation": "Validate and sanitize the file paths passed to send_file to prevent directory traversal attacks."
      },
      {
        "id": "PY015",
        "description": "Detect unsafe YAML loading",
        "pattern": "\\byaml\\.load\\s*\\(",
        "severity": "high",
        "recommendation": "Use yaml.safe_load() instead of yaml.load() to prevent execution of arbitrary code during YAML deserialization."
      },
      {
        "id": "PY016",
        "description": "Detect hard-coded sensitive information",
        "pattern": "(SECRET_KEY|PASSWORD|ACCESS_KEY|TOKEN)\\s*=\\s*[\"'].*[\"']",
        "severity": "high",
        "recommendation": "Avoid hard-coding sensitive information in the source code. Use environment variables or configuration files with proper access controls."
      },
      {
        "id": "PY017",
        "description": "Detect use of Werkzeug debug mode",
        "pattern": "run\\s*\\(.*debug\\s*=\\s*True",
        "severity": "high",
        "recommendation": "Disable debug mode in production environments to prevent exposure of sensitive information."
      },
      {
        "id": "PY018",
        "description": "Detect use of http in Flask routes",
        "pattern": "@app\\.route\\s*\\(\\s*['\"]http:",
        "severity": "medium",
        "recommendation": "Use HTTPS for all routes to ensure secure communication between client and server."
      },
      {
        "id": "PY019",
        "description": "Detect lack of rate limiting in Flask routes",
        "pattern": "@app\\.route",
        "severity": "medium",
        "recommendation": "Implement rate limiting on Flask routes to prevent brute force attacks and abuse of the API."
      },
      {
        "id": "PY020",
        "description": "Detect insecure cookie settings in Flask",
        "pattern": "response\\.set_cookie\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure cookies are set with secure and HttpOnly flags to prevent session hijacking and XSS attacks."
      },
      {
        "id": "PY021",
        "description": "Detect use of plaintext passwords",
        "pattern": "password\\s*=\\s*[\"'].*[\"']",
        "severity": "high",
        "recommendation": "Store passwords using secure hashing algorithms such as bcrypt or Argon2."
      },
      {
        "id": "PY022",
        "description": "Detect use of JWT without signature verification",
        "pattern": "jwt\\.decode\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure JWTs are verified with a secret key or public key to prevent token forgery."
      },
      {
        "id": "PY023",
        "description": "Detect use of deprecated cryptographic algorithms",
        "pattern": "\\b(md5|sha1)\\b",
        "severity": "high",
        "recommendation": "Use modern cryptographic algorithms such as SHA-256 or SHA-3 for hashing and HMAC."
      },
      {
        "id": "PY024",
        "description": "Detect missing input validation in Flask forms",
        "pattern": "form\\s*=\\s*\\{.*\\}",
        "severity": "high",
        "recommendation": "Implement proper input validation and sanitization for all form inputs to prevent XSS and other attacks."
      },
      {
        "id": "PY025",
        "description": "Detect lack of secure headers in Flask responses",
        "pattern": "response\\s*=\\s*make_response\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure secure headers such as Content-Security-Policy, X-Content-Type-Options, and X-Frame-Options are set in Flask responses."
      },
      {
        "id": "PY026",
        "description": "Detect use of Flask's jsonify with unsanitized input",
        "pattern": "\\bjsonify\\s*\\(",
        "severity": "high",
        "recommendation": "Sanitize input before passing it to jsonify to prevent XSS and injection attacks."
      },
      {
        "id": "PY027",
        "description": "Detect insecure file upload handling in Flask",
        "pattern": "request\\.files\\[.*\\]\\.save\\s*\\(",
        "severity": "high",
        "recommendation": "Validate and sanitize file names and paths before saving uploaded files to prevent directory traversal and other attacks."
      },
      {
        "id": "PY028",
        "description": "Detect potential XXE vulnerability in XML parsing",
        "pattern": "\\bxml\\.etree\\.ElementTree\\.parse\\s*\\(",
        "severity": "high",
        "recommendation": "Disable external entity expansion in XML parsers to prevent XXE attacks."
      },
      {
        "id": "PY029",
        "description": "Detect lack of security settings in Flask app",
        "pattern": "Flask\\s*\\(",
        "severity": "medium",
        "recommendation": "Set secure defaults such as SESSION_COOKIE_SECURE and SESSION_COOKIE_HTTPONLY in Flask app configuration."
      },
      {
        "id": "PY030",
        "description": "Detect missing CSRF protection in Django views",
        "pattern": "@csrf_exempt",
        "severity": "high",
        "recommendation": "Avoid using @csrf_exempt on Django views handling sensitive actions. Ensure CSRF protection is enabled."
      },
      {
        "id": "PY031",
        "description": "Detect insecure use of Django's FileField",
        "pattern": "FileField\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure file uploads are properly validated and sanitized in Django models."
      },
      {
        "id": "PY032",
        "description": "Detect use of insecure default settings in Django",
        "pattern": "settings\\.DEBUG\\s*=\\s*True",
        "severity": "high",
        "recommendation": "Disable DEBUG mode in production environments to prevent exposure of sensitive information."
      },
      {
        "id": "PY033",
        "description": "Detect missing content security policy in Django",
        "pattern": "ContentSecurityPolicyMiddleware",
        "severity": "medium",
        "recommendation": "Implement Content Security Policy (CSP) in Django to mitigate XSS attacks."
      },
      {
        "id": "PY034",
        "description": "Detect insecure use of Django's JsonResponse",
        "pattern": "JsonResponse\\s*\\(",
        "severity": "high",
        "recommendation": "Sanitize data before passing it to JsonResponse to prevent XSS and other injection attacks."
      },
      {
        "id": "PY035",
        "description": "Detect potential command injection in os.popen",
        "pattern": "os\\.popen\\s*\\(",
        "severity": "high",
        "recommendation": "Avoid using os.popen for command execution. Consider using subprocess.run() with appropriate arguments."
      },
      {
        "id": "PY036",
        "description": "Detect use of insecure Flask-CORS settings",
        "pattern": "CORS\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure CORS settings are properly configured to restrict cross-origin requests to trusted domains."
      },
      {
        "id": "PY037",
        "description": "Detect potential HTML injection in Django",
        "pattern": "mark_safe\\s*\\(",
        "severity": "high",
        "recommendation": "Avoid using mark_safe with untrusted input to prevent HTML injection and XSS."
      },
      {
        "id": "PY038",
        "description": "Detect missing input validation in Django forms",
        "pattern": "forms\\.Form",
        "severity": "medium",
        "recommendation": "Implement proper input validation and sanitization for all Django form inputs to prevent XSS and other attacks."
      },
      {
        "id": "PY039",
        "description": "Detect insecure use of Django's eval template tag",
        "pattern": "{%\\s*eval\\s*",
        "severity": "high",
        "recommendation": "Avoid using the eval template tag in Django templates to prevent code injection vulnerabilities."
      },
      {
        "id": "PY040",
        "description": "Detect missing secure cookie settings in Django",
        "pattern": "SESSION_COOKIE_SECURE\\s*=\\s*False",
        "severity": "high",
        "recommendation": "Set SESSION_COOKIE_SECURE to True in Django settings to ensure secure cookies."
      },
      {
        "id": "PY041",
        "description": "Detect potential insecure HTTP redirects in Flask",
        "pattern": "redirect\\s*\\(.*url_for\\s*\\(.*_external\\s*=\\s*True",
        "severity": "medium",
        "recommendation": "Ensure redirects are to secure (HTTPS) URLs to prevent man-in-the-middle attacks."
      },
      {
        "id": "PY042",
        "description": "Detect lack of input sanitization in Flask forms",
        "pattern": "request\\.form\\[.*\\]",
        "severity": "high",
        "recommendation": "Sanitize and validate all user inputs from request.form in Flask applications."
      },
      {
        "id": "PY043",
        "description": "Detect potential IDOR vulnerability in Flask",
        "pattern": "request\\.args\\.get\\s*\\(.*id",
        "severity": "high",
        "recommendation": "Implement proper authorization checks to prevent IDOR vulnerabilities in Flask applications."
      },
      {
        "id": "PY044",
        "description": "Detect use of hard-coded database credentials",
        "pattern": "(DB_USERNAME|DB_PASSWORD)\\s*=\\s*[\"'].*[\"']",
        "severity": "high",
        "recommendation": "Avoid hard-coding database credentials in the source code. Use environment variables or configuration files with proper access controls."
      },
      {
        "id": "PY045",
        "description": "Detect potential insecure use of Django's admin interface",
        "pattern": "admin\\.site\\.register\\s*\\(",
        "severity": "medium",
        "recommendation": "Restrict access to the Django admin interface and ensure proper authentication and authorization mechanisms are in place."
      },
      {
        "id": "PY046",
        "description": "Detect potential misuse of Django's reverse() function",
        "pattern": "reverse\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure URLs generated using reverse() are properly validated and sanitized to prevent injection attacks."
      },
      {
        "id": "PY047",
        "description": "Detect lack of secure transport for sensitive data",
        "pattern": "(http:|HTTP_)",
        "severity": "high",
        "recommendation": "Use HTTPS for all communication to ensure secure transport of sensitive data."
      },
      {
        "id": "PY048",
        "description": "Detect potential improper handling of user sessions",
        "pattern": "session\\[.*\\]",
        "severity": "medium",
        "recommendation": "Ensure user sessions are properly managed and secured to prevent session hijacking."
      },
      {
        "id": "PY049",
        "description": "Detect missing logging of security events",
        "pattern": "logging\\.info\\s*\\(",
        "severity": "medium",
        "recommendation": "Implement proper logging of security events and errors to aid in incident response and troubleshooting."
      },
      {
        "id": "PY050",
        "description": "Detect insecure handling of JSON data",
        "pattern": "json\\.loads\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure JSON data is properly validated and sanitized before processing to prevent injection attacks."
      },
      {
        "id": "PY051",
        "description": "Detect missing input validation in Django views",
        "pattern": "request\\.POST\\[.*\\]",
        "severity": "high",
        "recommendation": "Sanitize and validate all user inputs from request.POST in Django views to prevent XSS and other attacks."
      },
      {
        "id": "PY052",
        "description": "Detect potential misuse of Django's get_object_or_404",
        "pattern": "get_object_or_404\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure proper handling of objects retrieved using get_object_or_404 to prevent unauthorized access."
      },
      {
        "id": "PY053",
        "description": "Detect potential misuse of Flask's before_request",
        "pattern": "@app\\.before_request",
        "severity": "medium",
        "recommendation": "Ensure before_request handlers in Flask are properly implemented to enforce security policies."
      },
      {
        "id": "PY054",
        "description": "Detect potential misuse of Django's HttpResponse",
        "pattern": "HttpResponse\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure data passed to HttpResponse is properly sanitized to prevent XSS and other injection attacks."
      },
      {
        "id": "PY055",
        "description": "Detect potential misuse of Django's cache",
        "pattern": "cache\\.set\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure data stored in Django's cache is properly sanitized and validated to prevent injection attacks."
      },
      {
        "id": "PY056",
        "description": "Detect missing security configurations in Flask",
        "pattern": "Flask\\(__name__",
        "severity": "medium",
        "recommendation": "Set secure defaults such as SESSION_COOKIE_SECURE and SESSION_COOKIE_HTTPONLY in Flask app configuration."
      },
      {
        "id": "PY057",
        "description": "Detect insecure handling of file paths in Flask",
        "pattern": "os\\.path\\.join\\s*\\(",
        "severity": "high",
        "recommendation": "Validate and sanitize file paths to prevent directory traversal and other file handling vulnerabilities."
      },
      {
        "id": "PY058",
        "description": "Detect use of Django's static() without proper security",
        "pattern": "static\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure static files are properly served and secured to prevent unauthorized access and content tampering."
      },
      {
        "id": "PY059",
        "description": "Detect potential insecure use of Flask's json.loads",
        "pattern": "json\\.loads\\s*\\(",
        "severity": "high",
        "recommendation": "Sanitize and validate JSON data before processing to prevent injection attacks."
      },

      {
        "id": "PY060",
        "description": "Detect potential clickjacking vulnerability",
        "pattern": "response\\.headers\\[\"X-Frame-Options\"\\]\\s*=\\s*None",
        "severity": "high",
        "recommendation": "Set the X-Frame-Options header to 'DENY' or 'SAMEORIGIN' to prevent clickjacking."
      },
      {
        "id": "PY061",
        "description": "Detect potential HTTP header injection",
        "pattern": "response\\.headers\\[.*\\]\\s*=\\s*request\\.args\\.get\\s*\\(",
        "severity": "high",
        "recommendation": "Sanitize and validate input before using it to set HTTP headers to prevent header injection."
      },
      {
        "id": "PY062",
        "description": "Detect use of Flask's send_from_directory with unsanitized input",
        "pattern": "send_from_directory\\s*\\(",
        "severity": "high",
        "recommendation": "Validate and sanitize the directory paths passed to send_from_directory to prevent directory traversal attacks."
      },
      {
        "id": "PY063",
        "description": "Detect insecure use of Django's get_or_create",
        "pattern": "get_or_create\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure data passed to get_or_create is properly sanitized to prevent injection attacks."
      },
      {
        "id": "PY064",
        "description": "Detect use of Django's FileResponse with unsanitized input",
        "pattern": "FileResponse\\s*\\(",
        "severity": "high",
        "recommendation": "Validate and sanitize file paths passed to FileResponse to prevent directory traversal attacks."
      },
      {
        "id": "PY065",
        "description": "Detect insecure use of Django's RedirectView",
        "pattern": "RedirectView\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure redirects are properly validated and sanitized to prevent open redirect vulnerabilities."
      },
      {
        "id": "PY066",
        "description": "Detect use of Django's login() function with weak passwords",
        "pattern": "login\\s*\\(",
        "severity": "high",
        "recommendation": "Implement strong password policies and ensure passwords are hashed before storing."
      },
      {
        "id": "PY067",
        "description": "Detect potential timing attacks in authentication",
        "pattern": "if\\s*password\\s*==\\s*stored_password",
        "severity": "high",
        "recommendation": "Use constant-time comparison functions for comparing passwords to prevent timing attacks."
      },
      {
        "id": "PY068",
        "description": "Detect use of Django's HttpResponseRedirect with unsanitized input",
        "pattern": "HttpResponseRedirect\\s*\\(",
        "severity": "high",
        "recommendation": "Validate and sanitize URLs passed to HttpResponseRedirect to prevent open redirect vulnerabilities."
      },
      {
        "id": "PY069",
        "description": "Detect insecure use of Django's JsonResponse without safe parameter",
        "pattern": "JsonResponse\\s*\\(",
        "severity": "medium",
        "recommendation": "Use JsonResponse with the safe parameter set to False only when necessary and ensure data is sanitized."
      },
      {
        "id": "PY070",
        "description": "Detect missing HSTS header in Flask responses",
        "pattern": "response\\.headers\\[\"Strict-Transport-Security\"\\]\\s*=\\s*None",
        "severity": "high",
        "recommendation": "Set the Strict-Transport-Security header to enforce HTTPS and prevent SSL stripping attacks."
      },
      {
        "id": "PY071",
        "description": "Detect use of deprecated functions in Django",
        "pattern": "from django\\.utils\\.importlib import.*",
        "severity": "medium",
        "recommendation": "Avoid using deprecated functions and modules in Django. Update to the latest methods and practices."
      },
      {
        "id": "PY072",
        "description": "Detect use of Django's runserver in production",
        "pattern": "runserver",
        "severity": "high",
        "recommendation": "Avoid using Django's runserver in production. Use a production-ready WSGI server such as Gunicorn or uWSGI."
      },
      {
        "id": "PY073",
        "description": "Detect missing X-Content-Type-Options header in responses",
        "pattern": "response\\.headers\\[\"X-Content-Type-Options\"\\]\\s*=\\s*None",
        "severity": "medium",
        "recommendation": "Set the X-Content-Type-Options header to 'nosniff' to prevent MIME type sniffing."
      },
      {
        "id": "PY074",
        "description": "Detect potential use of insecure cross-origin resource sharing (CORS)",
        "pattern": "CORS\\s*\\(.*allow_headers\\s*=\\s*\\*",
        "severity": "high",
        "recommendation": "Restrict CORS settings to trusted domains and specific headers to prevent unauthorized access."
      },
      {
        "id": "PY075",
        "description": "Detect missing security settings in Flask-WTF",
        "pattern": "CSRFProtect\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure CSRF protection is properly configured in Flask-WTF forms."
      },
      {
        "id": "PY076",
        "description": "Detect potential exposure of sensitive information in debug logs",
        "pattern": "logging\\.debug\\s*\\(.*password",
        "severity": "high",
        "recommendation": "Avoid logging sensitive information such as passwords, API keys, or personal data in debug logs."
      },
      {
        "id": "PY077",
        "description": "Detect insecure use of Django's select_related",
        "pattern": "select_related\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure data fetched using select_related is properly validated and sanitized."
      },
      {
        "id": "PY078",
        "description": "Detect potential information leakage through HTTP headers",
        "pattern": "response\\.headers\\[\"Server\"\\]\\s*=\\s*",
        "severity": "medium",
        "recommendation": "Avoid disclosing server information through HTTP headers to prevent information leakage."
      },
      {
        "id": "PY079",
        "description": "Detect missing security checks in Django signals",
        "pattern": "@receiver\\s*",
        "severity": "medium",
        "recommendation": "Ensure security checks are implemented in Django signal handlers to prevent unauthorized actions."
      },
      {
        "id": "PY080",
        "description": "Detect use of Flask's json.dumps with unsanitized input",
        "pattern": "json\\.dumps\\s*\\(",
        "severity": "high",
        "recommendation": "Sanitize and validate data before passing it to json.dumps to prevent injection attacks."
      },
      {
        "id": "PY081",
        "description": "Detect missing CSRF token in Django forms",
        "pattern": "form\\.(is_valid|validate)\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure CSRF tokens are included and validated in Django forms to prevent CSRF attacks."
      },
      {
        "id": "PY082",
        "description": "Detect potential XSS in Django's render function",
        "pattern": "render\\s*\\(",
        "severity": "high",
        "recommendation": "Sanitize and validate data passed to Django's render function to prevent XSS attacks."
      },
      {
        "id": "PY083",
        "description": "Detect use of Django's get_list_or_404 with unsanitized input",
        "pattern": "get_list_or_404\\s*\\(",
        "severity": "medium",
        "recommendation": "Sanitize and validate input before using it in get_list_or_404 to prevent unauthorized access."
      },
      {
        "id": "PY084",
        "description": "Detect potential improper use of Django's annotate",
        "pattern": "annotate\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure data passed to annotate is properly validated to prevent injection attacks."
      },
      {
        "id": "PY085",
        "description": "Detect insecure use of Django's FilePathField",
        "pattern": "FilePathField\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure FilePathField paths are properly validated and sanitized to prevent directory traversal attacks."
      },
      {
        "id": "PY086",
        "description": "Detect use of Django's unsafe input methods",
        "pattern": "request\\.body",
        "severity": "high",
        "recommendation": "Sanitize and validate data retrieved from request.body to prevent injection attacks."
      },
      {
        "id": "PY087",
        "description": "Detect potential improper use of Django's F expressions",
        "pattern": "F\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure data used in Django's F expressions is properly validated to prevent injection attacks."
      },
      {
        "id": "PY088",
        "description": "Detect missing X-XSS-Protection header in responses",
        "pattern": "response\\.headers\\[\"X-XSS-Protection\"\\]\\s*=\\s*None",
        "severity": "medium",
        "recommendation": "Set the X-XSS-Protection header to '1; mode=block' to enable XSS filtering."
      }
    ]
  }

  
  