{
    "rules": [
      {
        "id": "JS001",
        "description": "Detect usage of eval() function",
        "pattern": "\\beval\\s*\\(",
        "severity": "high",
        "recommendation": "Avoid using eval() as it can lead to code injection vulnerabilities. Use safer alternatives such as JSON.parse() for parsing JSON."
      },{
  "rules": [
    {
      "id": "JS001",
      "title": "Avoid Open Redirect Vulnerabilities",
      "description": "Detects instances where user-controllable data is used to build URLs for redirects, potentially leading to open redirect vulnerabilities.",
      "impact": "High",
      "category": "Security",
      "tags": ["open redirect", "security", "vulnerability", "phishing"],
      "severity": "Blocker",
      "cwe": "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
      "examples": {
        "positive": [
          {
            "code": "const redirectUrl = '/home';\nres.redirect(redirectUrl);",
            "description": "Using a fixed URL for redirection."
          },
          {
            "code": "const redirectUrl = getSafeRedirectUrl(req.query.url);\nres.redirect(redirectUrl);",
            "description": "Validating and sanitizing the user-controllable URL before redirecting."
          }
        ],
        "negative": [
          {
            "code": "const redirectUrl = req.query.url;\nres.redirect(redirectUrl);",
            "description": "Using user-controllable data directly for redirection, leading to potential open redirect vulnerability.",
            "pattern": "res\\.redirect\\(req\\.[a-zA-Z0-9]+\\.url\\);"
          }
        ]
      },
      "fix": {
        "steps": [
          "Avoid using user-controllable data directly for redirection.",
          "Validate and sanitize any user input used for constructing URLs.",
          "Use a predefined set of allowed URLs or implement a whitelist of safe URLs."
        ],
        "examples": [
          {
            "code": "const redirectUrl = getSafeRedirectUrl(req.query.url);\nres.redirect(redirectUrl);",
            "description": "Validating and sanitizing the user-controllable URL before redirecting."
          }
        ]
      },
      "rationale": "Open redirect vulnerabilities can be exploited by attackers to redirect users to malicious sites, leading to phishing attacks, malware distribution, and JavaScript injection (XSS). Ensuring that URLs used for redirection are validated and sanitized helps protect against these threats."
    },
    {
      "id": "JS002",
      "title": "Avoid Zip Slip Vulnerabilities",
      "description": "Detects instances where archive entries are extracted without validating their paths, potentially leading to Zip Slip vulnerabilities.",
      "impact": "High",
      "category": "Security",
      "tags": ["zip slip", "security", "path traversal", "vulnerability"],
      "severity": "Blocker",
      "cwe": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
      "examples": {
        "positive": [
          {
            "code": "const extract = require('extract-zip');\nconst path = require('path');\nconst destPath = path.resolve('/path/to/extract');\nextract('/path/to/archive.zip', { dir: destPath }).then(() => {\n  console.log('Extraction complete');\n});",
            "description": "Uses a library that handles path validation correctly."
          }
        ],
        "negative": [
          {
            "code": "const unzipper = require('unzipper');\nconst fs = require('fs');\nfs.createReadStream('archive.zip').pipe(unzipper.Extract({ path: '/path/to/extract' }));",
            "description": "Extracts files from a zip archive without validating paths, leading to potential Zip Slip vulnerability.",
            "pattern": "(fs\\.createReadStream\\('.*'\\)\\.pipe\\(unzipper\\.Extract\\({ path: '.*' }\\)\\))"
          }
        ]
      },
      "fix": {
        "steps": [
          "Validate the paths of all archive entries before extraction.",
          "Use libraries that handle path validation securely.",
          "Avoid extracting files to locations outside the intended directory."
        ],
        "examples": [
          {
            "code": "const extract = require('extract-zip');\nconst path = require('path');\nconst destPath = path.resolve('/path/to/extract');\nextract('/path/to/archive.zip', { dir: destPath }).then(() => {\n  console.log('Extraction complete');\n});",
            "description": "Uses a library that handles path validation correctly."
          },
          {
            "code": "const path = require('path');\nconst fs = require('fs');\nconst unzipper = require('unzipper');\nconst destPath = path.resolve('/path/to/extract');\nfs.createReadStream('archive.zip').pipe(unzipper.Parse()).on('entry', entry => {\n  const filePath = path.join(destPath, entry.path);\n  if (!filePath.startsWith(destPath)) {\n    console.error('Zip Slip detected:', entry.path);\n    return;\n  }\n  entry.pipe(fs.createWriteStream(filePath));\n});",
            "description": "Manually validates paths to prevent Zip Slip vulnerability."
          }
        ]
      },
      "rationale": "Zip Slip vulnerabilities can lead to severe security issues, including arbitrary file overwrite and potential code execution. It is essential to validate paths during archive extraction to prevent these attacks."
    },
    {
      "id": "JS003",
      "title": "Avoid DOM-Based Cross-Site Scripting (XSS)",
      "description": "Detects instances where user-controllable data is used directly in dangerous DOM operations, potentially leading to DOM-based XSS vulnerabilities.",
      "impact": "High",
      "category": "Security",
      "tags": ["xss", "security", "injection", "vulnerability"],
      "severity": "Blocker",
      "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "examples": {
        "positive": [
          {
            "code": "const userInput = getUserInput();\ndocument.getElementById('output').textContent = userInput;",
            "description": "Uses textContent to safely insert user input into the DOM, avoiding the risk of XSS."
          },
          {
            "code": "const userInput = getUserInput();\ndocument.getElementById('output').innerHTML = sanitize(userInput);",
            "description": "Sanitizes user input before inserting it into the DOM using innerHTML."
          }
        ],
        "negative": [
          {
            "code": "const userInput = getUserInput();\ndocument.getElementById('output').innerHTML = userInput;",
            "description": "Directly inserts user input into the DOM using innerHTML, leading to potential XSS vulnerability.",
            "pattern": "document\\.getElementById\\('.*'\\)\\.innerHTML\\s*=\\s*.*;"
          },
          {
            "code": "const userInput = location.search;\neval(userInput);",
            "description": "Uses eval with user input from the URL, leading to potential XSS vulnerability.",
            "pattern": "eval\\(.*location\\.search.*\\);"
          }
        ]
      },
      "fix": {
        "steps": [
          "Avoid using dangerous functions such as innerHTML, eval, and others that can execute user input as code.",
          "Use textContent or innerText to safely insert user data into the DOM.",
          "Sanitize user input before inserting it into the DOM using libraries such as DOMPurify."
        ],
        "examples": [
          {
            "code": "const userInput = getUserInput();\ndocument.getElementById('output').textContent = userInput;",
            "description": "Uses textContent to safely insert user input into the DOM, avoiding the risk of XSS."
          },
          {
            "code": "const userInput = getUserInput();\ndocument.getElementById('output').innerHTML = sanitize(userInput);",
            "description": "Sanitizes user input before inserting it into the DOM using innerHTML."
          }
        ]
      },
      "rationale": "DOM-based XSS vulnerabilities can lead to severe security issues, including website defacement, user impersonation, and theft of sensitive data. It is essential to handle user input securely to prevent these attacks."
    },
    {
      "id": "JS004",
      "title": "Avoid Dynamic Code Execution Vulnerabilities",
      "description": "Detects instances where user-controllable data is used directly in functions that execute dynamic code, potentially leading to injection vulnerabilities.",
      "impact": "High",
      "category": "Security",
      "tags": ["code injection", "security", "dynamic code execution", "vulnerability"],
      "severity": "Blocker",
      "cwe": "CWE-94: Improper Control of Generation of Code ('Code Injection')",
      "reference_link":"https://cwe.mitre.org/data/definitions/94.html",
      "examples": {
        "positive": [
          {
            "code": "const userInput = getUserInput();\nconst sanitizedInput = sanitize(userInput);\nsecureFunction(sanitizedInput);",
            "description": "Sanitizes user input before passing it to a function that may execute code."
          },
          {
            "code": "const userInput = getUserInput();\nif (isValidInput(userInput)) {\n  safeFunction(userInput);\n}",
            "description": "Validates user input before using it in a function."
          }
        ],
        "negative": [
          {
            "code": "const userInput = getUserInput();\neval(userInput);",
            "description": "Uses eval with user input, leading to potential code injection vulnerability.",
            "pattern": "eval\\(.*\\);"
          },
          {
            "code": "const userInput = getUserInput();\nnew Function(userInput)();",
            "description": "Uses new Function with user input, leading to potential code injection vulnerability.",
            "pattern": "new Function\\(.*\\)\\(\\);"
          }
        ]
      },
      "fix": {
        "steps": [
          "Avoid using functions that execute dynamic code such as eval, new Function, setTimeout, and setInterval with user input.",
          "Sanitize and validate user input before passing it to any functions.",
          "Use safer alternatives for dynamic code execution where possible."
        ],
        "examples": [
          {
            "code": "const userInput = getUserInput();\nconst sanitizedInput = sanitize(userInput);\nsecureFunction(sanitizedInput);",
            "description": "Sanitizes user input before passing it to a function that may execute code."
          },
          {
            "code": "const userInput = getUserInput();\nif (isValidInput(userInput)) {\n  safeFunction(userInput);\n}",
            "description": "Validates user input before using it in a function."
          }
        ]
      },
      "rationale": "Dynamic code execution vulnerabilities can lead to severe security issues, including arbitrary code execution, data leaks, and privilege escalation. It is essential to handle user input securely and avoid dangerous functions that execute dynamic code."
    },  
    {
      "id": "JS005",
      "title": "Avoid NoSQL Injection Vulnerabilities",
      "description": "Detects instances where user-controllable data is used directly in NoSQL queries, potentially leading to injection vulnerabilities.",
      "impact": "High",
      "category": "Security",
      "tags": ["nosql injection", "security", "injection", "vulnerability"],
      "severity": "Blocker",
      "cwe": "CWE-943: Improper Neutralization of Special Elements in Data Query Logic",
      "examples": {
        "positive": [
          {
            "code": "const userInput = getUserInput();\nconst query = { username: userInput };",
            "description": "Safely constructs a NoSQL query using user input."
          },
          {
            "code": "const userInput = getUserInput();\nconst sanitizedInput = sanitize(userInput);\nconst query = { username: sanitizedInput };",
            "description": "Sanitizes user input before using it in a NoSQL query."
          }
        ],
        "negative": [
          {
            "code": "const userInput = getUserInput();\nconst query = { username: userInput, password: { $ne: '' } };",
            "description": "Uses user input directly in a NoSQL query, leading to potential injection vulnerability.",
            "pattern": "{.*:.*\\$.*:.*}"
          },
          {
            "code": "const userInput = getUserInput();\ndb.collection('users').find({ username: userInput }).toArray();",
            "description": "Uses user input directly in a NoSQL query, leading to potential injection vulnerability.",
            "pattern": "db\\.collection\\('.*'\\)\\.find\\({.*:.*}\\)\\.toArray\\(\\);"
          }
        ]
      },
      "fix": {
        "steps": [
          "Avoid using user input directly in NoSQL queries.",
          "Sanitize and validate user input before using it in any database queries.",
          "Use parameterized queries or other secure methods provided by the NoSQL database."
        ],
        "examples": [
          {
            "code": "const userInput = getUserInput();\nconst query = { username: userInput };",
            "description": "Safely constructs a NoSQL query using user input."
          },
          {
            "code": "const userInput = getUserInput();\nconst sanitizedInput = sanitize(userInput);\nconst query = { username: sanitizedInput };",
            "description": "Sanitizes user input before using it in a NoSQL query."
          }
        ]
      },
      "rationale": "NoSQL injection vulnerabilities can lead to severe security issues, including identity spoofing, data leakage, and data deletion. It is essential to handle user input securely and avoid dangerous query constructions that can lead to injection attacks."
    },
    {
      "id": "JS006",
      "title": "Avoid Open Redirection Vulnerabilities",
      "description": "Detects instances where user-controllable data is used directly in HTTP redirections, potentially leading to open redirection vulnerabilities.",
      "impact": "High",
      "category": "Security",
      "tags": ["open redirection", "security", "injection", "vulnerability"],
      "severity": "Blocker",
      "cwe": "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
      "examples": {
        "positive": [
          {
            "code": "const safeRedirect = '/home';\nres.redirect(safeRedirect);",
            "description": "Uses a hardcoded, safe redirect URL."
          },
          {
            "code": "const allowedUrls = ['/home', '/profile'];\nconst redirectUrl = getRedirectUrl();\nif (allowedUrls.includes(redirectUrl)) {\n  res.redirect(redirectUrl);\n} else {\n  res.redirect('/home');\n}",
            "description": "Validates the redirect URL against a whitelist of allowed URLs."
          }
        ],
        "negative": [
          {
            "code": "const redirectUrl = req.query.url;\nres.redirect(redirectUrl);",
            "description": "Uses user input directly for the redirect URL, leading to potential open redirection vulnerability.",
            "pattern": "res\\.redirect\\(.*req\\.query\\.url.*\\);"
          },
          {
            "code": "const redirectUrl = req.body.url;\nres.redirect(redirectUrl);",
            "description": "Uses user input from the request body directly for the redirect URL, leading to potential open redirection vulnerability.",
            "pattern": "res\\.redirect\\(.*req\\.body\\.url.*\\);"
          }
        ]
      },
      "fix": {
        "steps": [
          "Avoid using user input directly in HTTP redirection URLs.",
          "Sanitize and validate user input before using it in any redirect URLs.",
          "Use a whitelist of allowed redirect URLs and validate user input against this list."
        ],
        "examples": [
          {
            "code": "const safeRedirect = '/home';\nres.redirect(safeRedirect);",
            "description": "Uses a hardcoded, safe redirect URL."
          },
          {
            "code": "const allowedUrls = ['/home', '/profile'];\nconst redirectUrl = getRedirectUrl();\nif (allowedUrls.includes(redirectUrl)) {\n  res.redirect(redirectUrl);\n} else {\n  res.redirect('/home');\n}",
            "description": "Validates the redirect URL against a whitelist of allowed URLs."
          }
        ]
      },
      "rationale": "Open redirection vulnerabilities can lead to severe security issues, including phishing attacks, malware distribution, and credential theft. It is essential to handle user input securely and avoid using it directly in HTTP redirections."
    },
    {
      "id": "JS007",
      "title": "Avoid Reflected Cross-Site Scripting (XSS) Vulnerabilities",
      "description": "Detects instances where user-controllable data is used directly in HTTP responses without proper sanitization, potentially leading to reflected XSS vulnerabilities.",
      "impact": "High",
      "category": "Security",
      "tags": ["xss", "security", "injection", "vulnerability"],
      "severity": "Blocker",
      "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "examples": {
        "positive": [
          {
            "code": "const userInput = getUserInput();\nconst sanitizedInput = sanitize(userInput);\nres.send(`<div>${sanitizedInput}</div>`);",
            "description": "Sanitizes user input before inserting it into the HTTP response."
          },
          {
            "code": "const userInput = getUserInput();\nres.send(`<div>${encodeURIComponent(userInput)}</div>`);",
            "description": "Encodes user input before inserting it into the HTTP response."
          }
        ],
        "negative": [
          {
            "code": "const userInput = req.query.input;\nres.send(`<div>${userInput}</div>`);",
            "description": "Uses user input directly in the HTTP response, leading to potential reflected XSS vulnerability.",
            "pattern": "res\\.send\\(`.*${.*req\\.query.*}.*`\\);"
          },
          {
            "code": "const userInput = req.body.input;\nres.send(`<div>${userInput}</div>`);",
            "description": "Uses user input from the request body directly in the HTTP response, leading to potential reflected XSS vulnerability.",
            "pattern": "res\\.send\\(`.*${.*req\\.body.*}.*`\\);"
          }
        ]
      },
      "fix": {
        "steps": [
          "Avoid using user input directly in HTTP responses.",
          "Sanitize and validate user input before using it in any HTTP response.",
          "Use encoding functions to escape any potentially harmful characters in user input."
        ],
        "examples": [
          {
            "code": "const userInput = getUserInput();\nconst sanitizedInput = sanitize(userInput);\nres.send(`<div>${sanitizedInput}</div>`);",
            "description": "Sanitizes user input before inserting it into the HTTP response."
          },
          {
            "code": "const userInput = getUserInput();\nres.send(`<div>${encodeURIComponent(userInput)}</div>`);",
            "description": "Encodes user input before inserting it into the HTTP response."
          }
        ]
      },
      "rationale": "Reflected cross-site scripting (XSS) vulnerabilities can lead to severe security issues, including session hijacking, data theft, and defacement. It is essential to handle user input securely and avoid using it directly in HTTP responses without proper sanitization or encoding."
    },
    {
      "id": "JS008",
      "title": "Avoid Database Injection Vulnerabilities",
      "description": "Detects instances where user-controllable data is used directly in database queries without proper sanitization, potentially leading to database injection vulnerabilities.",
      "impact": "High",
      "category": "Security",
      "tags": ["sql injection", "nosql injection", "security", "vulnerability"],
      "severity": "Blocker",
      "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
      "examples": {
        "positive": [
          {
            "code": "const userInput = getUserInput();\nconst query = 'SELECT * FROM users WHERE username = ?';\ndb.query(query, [userInput], (err, results) => { /* handle results */ });",
            "description": "Uses parameterized queries to prevent SQL injection."
          },
          {
            "code": "const userInput = getUserInput();\nconst sanitizedInput = sanitize(userInput);\nconst query = `SELECT * FROM users WHERE username = '${sanitizedInput}'`;\ndb.query(query, (err, results) => { /* handle results */ });",
            "description": "Sanitizes user input before using it in a database query."
          }
        ],
        "negative": [
          {
            "code": "const userInput = req.query.username;\nconst query = `SELECT * FROM users WHERE username = '${userInput}'`;\ndb.query(query, (err, results) => { /* handle results */ });",
            "description": "Uses user input directly in an SQL query, leading to potential SQL injection vulnerability.",
            "pattern": "db\\.query\\(`.*${userInput}.*`\\);"
          },
          {
            "code": "const userInput = req.body.username;\nconst query = `SELECT * FROM users WHERE username = '${userInput}'`;\ndb.query(query, (err, results) => { /* handle results */ });",
            "description": "Uses user input from the request body directly in an SQL query, leading to potential SQL injection vulnerability.",
            "pattern": "db\\.query\\(`.*${userInput}.*`\\);"
          }
        ]
      },
      "fix": {
        "steps": [
          "Avoid using user input directly in database queries.",
          "Use parameterized queries or prepared statements to safely handle user input.",
          "Sanitize and validate user input before using it in any database queries."
        ],
        "examples": [
          {
            "code": "const userInput = getUserInput();\nconst query = 'SELECT * FROM users WHERE username = ?';\ndb.query(query, [userInput], (err, results) => { /* handle results */ });",
            "description": "Uses parameterized queries to prevent SQL injection."
          },
          {
            "code": "const userInput = getUserInput();\nconst sanitizedInput = sanitize(userInput);\nconst query = `SELECT * FROM users WHERE username = '${sanitizedInput}'`;\ndb.query(query, (err, results) => { /* handle results */ });",
            "description": "Sanitizes user input before using it in a database query."
          }
        ]
      },
      "rationale": "Database injection vulnerabilities can lead to severe security issues, including unauthorized data access, data manipulation, and denial of service. It is essential to handle user input securely and avoid direct usage in database queries to prevent injection attacks."
    },
    {
      "id": "JS009",
      "title": "Avoid XML External Entity (XXE) Vulnerabilities",
      "description": "Detects instances where XML parsers allow the usage of external entities, which can lead to XML External Entity (XXE) vulnerabilities.",
      "impact": "High",
      "category": "Security",
      "tags": ["xxe", "xml", "security", "vulnerability"],
      "severity": "Blocker",
      "cwe": "CWE-611: Improper Restriction of XML External Entity Reference ('XXE')",
      "examples": {
        "positive": [
          {
            "code": "const parser = new DOMParser();\nparser.setProperty('http://xml.org/sax/features/external-general-entities', false);\nparser.setProperty('http://xml.org/sax/features/external-parameter-entities', false);\nconst xml = '<root><element>Data</element></root>';\nconst doc = parser.parseFromString(xml, 'application/xml');",
            "description": "Disables external entity processing to prevent XXE attacks."
          },
          {
            "code": "const parser = new DOMParser();\nconst xml = '<root><element>Data</element></root>';\nconst doc = parser.parseFromString(xml, 'application/xml');\n// External entities are not enabled by default",
            "description": "Using XML parser with default settings that do not process external entities."
          }
        ],
        "negative": [
          {
            "code": "const parser = new DOMParser();\nconst xml = '<!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"file:///etc/passwd\"> ]><root>&xxe;</root>';\nconst doc = parser.parseFromString(xml, 'application/xml');",
            "description": "Allows external entities in XML, leading to potential XXE vulnerability.",
            "pattern": "<!ENTITY .* SYSTEM .*"
          },
          {
            "code": "const parser = new DOMParser();\nconst xml = '<!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"http://malicious.example.com/malicious.dtd\"> ]><root>&xxe;</root>';\nconst doc = parser.parseFromString(xml, 'application/xml');",
            "description": "Allows external entities in XML which can be used for SSRF or other attacks.",
            "pattern": "<!ENTITY .* SYSTEM .*http://.*>"
          }
        ]
      },
      "fix": {
        "steps": [
          "Disable external entity processing in XML parsers to mitigate XXE vulnerabilities.",
          "Use XML parsers and libraries that do not process external entities by default.",
          "Sanitize and validate XML input to ensure it does not contain harmful entities or constructs."
        ],
        "examples": [
          {
            "code": "const parser = new DOMParser();\nparser.setProperty('http://xml.org/sax/features/external-general-entities', false);\nparser.setProperty('http://xml.org/sax/features/external-parameter-entities', false);\nconst xml = '<root><element>Data</element></root>';\nconst doc = parser.parseFromString(xml, 'application/xml');",
            "description": "Disables external entity processing in the parser configuration."
          },
          {
            "code": "const parser = new DOMParser();\nconst xml = '<root><element>Data</element></root>';\nconst doc = parser.parseFromString(xml, 'application/xml');",
            "description": "Using XML parser with default settings that are safe against XXE attacks."
          }
        ]
      },
      "rationale": "XXE vulnerabilities can lead to severe security issues, including unauthorized access to sensitive data, resource exhaustion, and server-side request forgery (SSRF). Properly configuring XML parsers to disable external entities and validating XML input is crucial for preventing these attacks."
    },
    {
      "id": "JS010",
      "title": "Avoid Path Injection Vulnerabilities",
      "description": "Detects instances where untrusted user input is used to construct file paths, potentially leading to path injection vulnerabilities.",
      "impact": "High",
      "category": "Security",
      "tags": ["path injection", "file system", "security", "vulnerability"],
      "severity": "Blocker",
      "cwe": "CWE-36: Absolute Path Traversal",
      "examples": {
        "positive": [
          {
            "code": "const path = require('path');\nconst userFile = sanitizeUserInput(req.query.file);\nconst filePath = path.resolve(__dirname, 'uploads', userFile);\nfs.readFile(filePath, (err, data) => { /* handle file data */ });",
            "description": "Sanitizes user input and resolves the file path to prevent path traversal."
          },
          {
            "code": "const userFile = sanitize(req.body.file);\nconst filePath = `/safe/path/${userFile}`;\nfs.readFile(filePath, (err, data) => { /* handle file data */ });",
            "description": "Sanitizes user input before using it to construct file paths."
          }
        ],
        "negative": [
          {
            "code": "const filePath = `/uploads/${req.query.file}`;\nfs.readFile(filePath, (err, data) => { /* handle file data */ });",
            "description": "Directly uses user input to construct file paths, potentially leading to path injection attacks.",
            "pattern": "`/uploads/${req.query.file}`"
          },
          {
            "code": "const filePath = `/data/${req.body.file}`;\nfs.readFile(filePath, (err, data) => { /* handle file data */ });",
            "description": "Directly uses user input from the request body in file paths, leading to potential path injection vulnerabilities.",
            "pattern": "`/data/${req.body.file}`"
          }
        ]
      },
      "fix": {
        "steps": [
          "Sanitize and validate user input before using it to construct file paths.",
          "Use secure functions and libraries that help prevent path injection attacks.",
          "Resolve file paths to absolute paths and ensure they stay within a designated directory."
        ],
        "examples": [
          {
            "code": "const path = require('path');\nconst userFile = sanitizeUserInput(req.query.file);\nconst filePath = path.resolve(__dirname, 'uploads', userFile);\nfs.readFile(filePath, (err, data) => { /* handle file data */ });",
            "description": "Sanitizes and resolves the file path to ensure it is within a safe directory."
          },
          {
            "code": "const userFile = sanitize(req.body.file);\nconst filePath = `/safe/path/${userFile}`;\nfs.readFile(filePath, (err, data) => { /* handle file data */ });",
            "description": "Sanitizes user input and constructs file paths carefully to avoid injection attacks."
          }
        ]
      },
      "rationale": "Path injection vulnerabilities can lead to severe security issues, including unauthorized file access, file deletion, and system compromise. Ensuring that user input is properly sanitized and that file paths are securely constructed is essential for preventing these attacks."
    },      
    {
      "id": "JS011",
      "title": "Avoid OS Command Injection Vulnerabilities",
      "description": "Detects instances where untrusted user input is used to construct and execute OS commands, potentially leading to command injection vulnerabilities.",
      "impact": "High",
      "category": "Security",
      "tags": ["command injection", "os command", "security", "vulnerability"],
      "severity": "Blocker",
      "cwe": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "examples": {
        "positive": [
          {
            "code": "const { execFile } = require('child_process');\nconst userCommand = sanitizeUserInput(req.query.command);\nexecFile('/usr/bin/safe-command', [userCommand], (error, stdout, stderr) => { /* handle output */ });",
            "description": "Sanitizes user input and uses `execFile` to avoid shell command injection."
          },
          {
            "code": "const { spawn } = require('child_process');\nconst userArgs = sanitizeUserInput(req.body.args);\nconst process = spawn('safe-command', [userArgs]);\nprocess.stdout.on('data', (data) => { /* handle output */ });",
            "description": "Sanitizes user input and uses `spawn` to avoid shell command injection."
          }
        ],
        "negative": [
          {
            "code": "const exec = require('child_process').exec;\nconst command = `ls ${req.query.dir}`;\nexec(command, (error, stdout, stderr) => { /* handle output */ });",
            "description": "Directly uses user input to construct a command line, leading to potential command injection vulnerabilities.",
            "pattern": "`ls ${req.query.dir}`"
          },
          {
            "code": "const exec = require('child_process').exec;\nconst command = `rm -rf ${req.body.path}`;\nexec(command, (error, stdout, stderr) => { /* handle output */ });",
            "description": "Directly uses user input from the request body in command line construction, leading to potential command injection vulnerabilities.",
            "pattern": "`rm -rf ${req.body.path}`"
          }
        ]
      },
      "fix": {
        "steps": [
          "Avoid constructing OS command lines from untrusted user input.",
          "Use safer APIs such as `execFile` or `spawn` from the `child_process` module to handle OS commands, which provide better control over arguments and reduce injection risk.",
          "Sanitize and validate all user inputs before using them in OS commands."
        ],
        "examples": [
          {
            "code": "const { execFile } = require('child_process');\nconst userCommand = sanitizeUserInput(req.query.command);\nexecFile('/usr/bin/safe-command', [userCommand], (error, stdout, stderr) => { /* handle output */ });",
            "description": "Uses `execFile` to run a command with sanitized input."
          },
          {
            "code": "const { spawn } = require('child_process');\nconst userArgs = sanitizeUserInput(req.body.args);\nconst process = spawn('safe-command', [userArgs]);\nprocess.stdout.on('data', (data) => { /* handle output */ });",
            "description": "Uses `spawn` with sanitized arguments to avoid command injection."
          }
        ]
      },
      "rationale": "OS command injection vulnerabilities can lead to severe security issues, including unauthorized command execution, system compromise, and data loss. Properly sanitizing user inputs and using secure functions to execute OS commands are crucial for preventing these attacks."
    },
    {
      "id": "JS012",
      "title": "AWS IAM Policies Should Limit the Scope of Permissions Given",
      "description": "Detects instances where AWS IAM policies grant overly broad permissions, which can lead to privilege escalation and potential security risks.",
      "impact": "Critical",
      "category": "Security",
      "tags": ["AWS", "IAM", "permissions", "security", "vulnerability"],
      "severity": "Blocker",
      "cwe": "CWE-284: Improper Access Control",
      "examples": {
        "positive": [
          {
            "code": "const policy = {\n  Version: '2012-10-17',\n  Statement: [\n    {\n      Effect: 'Allow',\n      Action: [\n        's3:GetObject',\n        's3:ListBucket'\n      ],\n      Resource: [\n        'arn:aws:s3:::example-bucket',\n        'arn:aws:s3:::example-bucket/*'\n      ]\n    }\n  ]\n};",
            "description": "This policy grants specific permissions to access an S3 bucket, adhering to the principle of least privilege."
          }
        ],
        "negative": [
          {
            "code": "const policy = {\n  Version: '2012-10-17',\n  Statement: [\n    {\n      Effect: 'Allow',\n      Action: '*',\n      Resource: '*'\n    }\n  ]\n};",
            "description": "This policy grants overly broad permissions to all actions and resources, which is a security risk.",
            "pattern": "'Action': '*', 'Resource': '*'"
          }
        ]
      },
      "fix": {
        "steps": [
          "Review the IAM policies and identify permissions that are overly broad.",
          "Replace wildcard permissions with specific actions and resources that are necessary for the workload.",
          "Adhere to the principle of least privilege by granting only the permissions needed to perform specific tasks."
        ],
        "examples": [
          {
            "code": "const policy = {\n  Version: '2012-10-17',\n  Statement: [\n    {\n      Effect: 'Allow',\n      Action: [\n        's3:GetObject',\n        's3:ListBucket'\n      ],\n      Resource: [\n        'arn:aws:s3:::example-bucket',\n        'arn:aws:s3:::example-bucket/*'\n      ]\n    }\n  ]\n};",
            "description": "This compliant solution grants specific permissions to access an S3 bucket, reducing the risk of privilege escalation."
          }
        ]
      },
      "rationale": "AWS IAM policies that contain overly broad permissions can lead to privilege escalation by granting users more access than necessary. They may be able to perform actions beyond their intended scope, leading to potential security risks."
    },
    {
      "id": "JS013",
      "title": "A New Session Should Be Created During User Authentication",
      "description": "Detects instances where a new session is not created during user authentication, which can lead to session fixation attacks and security vulnerabilities.",
      "impact": "Critical",
      "category": "Security",
      "tags": ["consistency", "conventional", "security", "vulnerability"],
      "severity": "Blocker",
      "cwe": "CWE-384: Session Fixation",
      "examples": {
        "positive": [
          {
            "code": "function authenticateUser(username, password) {\n  // Invalidate old session\n  req.session.regenerate(function(err) {\n    if (err) throw err;\n    // Set new session values\n    req.session.user = username;\n    // Proceed with authentication\n  });\n}",
            "description": "This code regenerates the session upon user authentication, preventing session fixation."
          }
        ],
        "negative": [
          {
            "code": "function authenticateUser(username, password) {\n  // Proceed with authentication without regenerating session\n  req.session.user = username;\n}",
            "description": "This code does not regenerate the session upon user authentication, making it vulnerable to session fixation attacks.",
            "pattern": "req.session.user = username;"
          }
        ]
      },
      "fix": {
        "steps": [
          "Ensure that the session is regenerated or a new session is created during user authentication.",
          "Invalidate the old session identifier and assign a new one to prevent session fixation.",
          "Review the authentication code to ensure that it follows best practices for session management."
        ],
        "examples": [
          {
            "code": "function authenticateUser(username, password) {\n  // Invalidate old session\n  req.session.regenerate(function(err) {\n    if (err) throw err;\n    // Set new session values\n    req.session.user = username;\n    // Proceed with authentication\n  });\n}",
            "description": "This compliant solution regenerates the session during user authentication, mitigating the risk of session fixation attacks."
          }
        ]
      },
      "rationale": "Session fixation attacks exploit the way web applications handle session identifiers. By ensuring a new session is created during user authentication, the risk of session fixation is mitigated, improving the overall security of the application."
    },
    {
      "id": "JS014",
      "title": "JWT Should Be Signed and Verified with Strong Cipher Algorithms",
      "description": "Detects instances where JSON Web Tokens (JWTs) are not signed with strong cipher algorithms or their signatures are not verified, which can lead to security vulnerabilities and user impersonation.",
      "impact": "Critical",
      "category": "Security",
      "tags": ["trustworthy", "security", "vulnerability", "critical", "cwe", "privacy"],
      "severity": "Blocker",
      "cwe": "CWE-347: Improper Verification of Cryptographic Signature",
      "examples": {
        "positive": [
          {
            "code": "const jwt = require('jsonwebtoken');\nconst token = jwt.sign({ userId: 123 }, 'your-strong-secret-key', { algorithm: 'HS256' });\nconst verifiedToken = jwt.verify(token, 'your-strong-secret-key', { algorithms: ['HS256'] });",
            "description": "This code securely signs and verifies a JWT using a strong cipher algorithm."
          }
        ],
        "negative": [
          {
            "code": "const jwt = require('jsonwebtoken');\nconst token = jwt.sign({ userId: 123 }, 'weak-key');\nconst verifiedToken = jwt.verify(token, 'weak-key');",
            "description": "This code signs and verifies a JWT using a weak cipher algorithm, making it vulnerable to forgery and impersonation.",
            "pattern": "jwt.sign(.*?, 'weak-key')|jwt.verify(.*?, 'weak-key')"
          },
          {
            "code": "const jwt = require('jsonwebtoken');\nconst token = jwt.sign({ userId: 123 }, 'your-strong-secret-key');\n// Token is not verified",
            "description": "This code does not verify the JWT signature, making it vulnerable to forgery and impersonation.",
            "pattern": "jwt.sign(.*?);(?!.*jwt.verify)"
          }
        ]
      },
      "fix": {
        "steps": [
          "Ensure that JWTs are signed using a strong cipher algorithm such as HS256 or RS256.",
          "Verify the JWT signature using the same strong cipher algorithm before using the token.",
          "Review the code to ensure that all JWTs are properly signed and verified."
        ],
        "examples": [
          {
            "code": "const jwt = require('jsonwebtoken');\nconst token = jwt.sign({ userId: 123 }, 'your-strong-secret-key', { algorithm: 'HS256' });\nconst verifiedToken = jwt.verify(token, 'your-strong-secret-key', { algorithms: ['HS256'] });",
            "description": "This compliant solution securely signs and verifies a JWT using a strong cipher algorithm, mitigating the risk of forgery and impersonation."
          }
        ]
      },
      "rationale": "JWTs that are not properly signed and verified with strong cipher algorithms can be forged, leading to user impersonation and unauthorized data access. Ensuring that JWTs are securely signed and verified maintains the integrity and security of user identities and authorization claims."
    },
    {
      "id": "JS015",
      "title": "Cipher Algorithms Should Be Robust",
      "description": "Detects instances where encryption algorithms are not robust, making it possible for the cleartext of the encrypted message to be recoverable without prior knowledge of the key.",
      "impact": "Critical",
      "category": "Security",
      "tags": ["trustworthy", "security", "vulnerability", "critical", "cwe", "privacy"],
      "severity": "Blocker",
      "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
      "examples": {
        "positive": [
          {
            "code": "const crypto = require('crypto');\nconst algorithm = 'aes-256-cbc';\nconst key = crypto.randomBytes(32);\nconst iv = crypto.randomBytes(16);\nconst cipher = crypto.createCipheriv(algorithm, key, iv);\nlet encrypted = cipher.update('some clear text data', 'utf8', 'hex');\nencrypted += cipher.final('hex');",
            "description": "This code securely encrypts data using a strong cipher algorithm."
          }
        ],
        "negative": [
          {
            "code": "const crypto = require('crypto');\nconst algorithm = 'aes-128-ecb';\nconst key = 'weak-key';\nconst cipher = crypto.createCipher(algorithm, key);\nlet encrypted = cipher.update('some clear text data', 'utf8', 'hex');\nencrypted += cipher.final('hex');",
            "description": "This code uses a weak cipher algorithm and key, making it vulnerable to cryptographic attacks.",
            "pattern": "crypto.createCipher\\(.*'aes-128-ecb'.*\\)|crypto.createCipher\\(.*, 'weak-key'.*\\)"
          }
        ]
      },
      "fix": {
        "steps": [
          "Ensure that robust encryption algorithms such as AES-256-CBC are used.",
          "Avoid using weak keys and ensure keys are generated using secure methods.",
          "Review the code to ensure that all encryption uses strong and secure algorithms."
        ],
        "examples": [
          {
            "code": "const crypto = require('crypto');\nconst algorithm = 'aes-256-cbc';\nconst key = crypto.randomBytes(32);\nconst iv = crypto.randomBytes(16);\nconst cipher = crypto.createCipheriv(algorithm, key, iv);\nlet encrypted = cipher.update('some clear text data', 'utf8', 'hex');\nencrypted += cipher.final('hex');",
            "description": "This compliant solution securely encrypts data using a strong cipher algorithm, mitigating the risk of data recovery by unauthorized parties."
          }
        ]
      },
      "rationale": "Using robust encryption algorithms is essential for protecting sensitive information and ensuring secure communication. Weak algorithms or keys increase the risk of unauthorized recovery of the cleartext, potentially leading to theft of sensitive data and other security breaches."
    },
    {
      "id": "JS016",
      "title": "Encryption Algorithms Should Be Used with Secure Mode and Padding Scheme",
      "description": "Detects instances where encryption algorithms are used with insecure modes or padding schemes, making it possible for the cleartext of the encrypted message to be recoverable without prior knowledge of the key.",
      "impact": "Critical",
      "category": "Security",
      "tags": ["trustworthy", "security", "vulnerability", "critical", "cwe", "privacy"],
      "severity": "Blocker",
      "cwe": "CWE-329: Not Using a Random IV with CBC Mode",
      "examples": {
        "positive": [
          {
            "code": "const crypto = require('crypto');\nconst algorithm = 'aes-256-cbc';\nconst key = crypto.randomBytes(32);\nconst iv = crypto.randomBytes(16);\nconst cipher = crypto.createCipheriv(algorithm, key, iv);\nlet encrypted = cipher.update('some clear text data', 'utf8', 'hex');\nencrypted += cipher.final('hex');",
            "description": "This code securely encrypts data using a strong cipher algorithm with a secure mode and padding scheme."
          }
        ],
        "negative": [
          {
            "code": "const crypto = require('crypto');\nconst algorithm = 'aes-128-ecb';\nconst key = 'weak-key';\nconst cipher = crypto.createCipher(algorithm, key);\nlet encrypted = cipher.update('some clear text data', 'utf8', 'hex');\nencrypted += cipher.final('hex');",
            "description": "This code uses a weak cipher algorithm and key, and an insecure mode (ECB), making it vulnerable to cryptographic attacks.",
            "pattern": "crypto.createCipher\\(.*'aes-128-ecb'.*\\)|crypto.createCipher\\(.*, 'weak-key'.*\\)"
          },
          {
            "code": "const crypto = require('crypto');\nconst algorithm = 'rsa';\nconst key = 'some-key';\nconst cipher = crypto.publicEncrypt({ key: key, padding: crypto.constants.RSA_PKCS1_PADDING }, Buffer.from('some clear text data'));\nlet encrypted = cipher.toString('hex');",
            "description": "This code uses RSA encryption with the insecure PKCS1v1.5 padding scheme, making it vulnerable to cryptographic attacks.",
            "pattern": "crypto.publicEncrypt\\(\\{.*padding: crypto.constants.RSA_PKCS1_PADDING.*\\}\\)"
          }
        ]
      },
      "fix": {
        "steps": [
          "Ensure that robust encryption algorithms such as AES-256-CBC with a secure mode (e.g., CBC) and padding scheme (e.g., PKCS7) are used.",
          "Avoid using weak keys and ensure keys are generated using secure methods.",
          "Review the code to ensure that all encryption uses strong and secure algorithms and padding schemes."
        ],
        "examples": [
          {
            "code": "const crypto = require('crypto');\nconst algorithm = 'aes-256-cbc';\nconst key = crypto.randomBytes(32);\nconst iv = crypto.randomBytes(16);\nconst cipher = crypto.createCipheriv(algorithm, key, iv);\nlet encrypted = cipher.update('some clear text data', 'utf8', 'hex');\nencrypted += cipher.final('hex');",
            "description": "This compliant solution securely encrypts data using a strong cipher algorithm, a secure mode, and padding scheme, mitigating the risk of data recovery by unauthorized parties."
          },
          {
            "code": "const crypto = require('crypto');\nconst algorithm = 'rsa';\nconst key = 'some-key';\nconst cipher = crypto.publicEncrypt({ key: key, padding: crypto.constants.RSA_PKCS1_OAEP_PADDING }, Buffer.from('some clear text data'));\nlet encrypted = cipher.toString('hex');",
            "description": "This compliant solution securely encrypts data using RSA with a secure padding scheme, mitigating the risk of data recovery by unauthorized parties."
          }
        ]
      },
      "rationale": "Using encryption algorithms with secure modes and padding schemes is essential for protecting sensitive information and ensuring secure communication. Weak algorithms, modes, or padding schemes increase the risk of unauthorized recovery of the cleartext, potentially leading to theft of sensitive data and other security breaches."
    },
    {
      "id": "JS017",
      "title": "Server Hostnames Should Be Verified During SSL/TLS Connections",
      "description": "Detects instances where SSL/TLS connections do not verify server hostnames, making it possible for attackers to impersonate a trusted host.",
      "impact": "Critical",
      "category": "Security",
      "tags": ["complete", "security", "vulnerability", "critical", "cwe", "privacy", "ssl"],
      "severity": "Blocker",
      "cwe": "CWE-295: Improper Certificate Validation",
      "examples": {
        "positive": [
          {
            "code": "const https = require('https');\nconst options = {\n  hostname: 'example.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  rejectUnauthorized: true,\n  checkServerIdentity: (host, cert) => {\n    const err = https.checkServerIdentity(host, cert);\n    if (err) {\n      throw err;\n    }\n  }\n};\nconst req = https.request(options, (res) => {\n  res.on('data', (d) => {\n    process.stdout.write(d);\n  });\n});\nreq.on('error', (e) => {\n  console.error(e);\n});\nreq.end();",
            "description": "This code securely verifies the server hostname during an SSL/TLS connection."
          }
        ],
        "negative": [
          {
            "code": "const https = require('https');\nconst options = {\n  hostname: 'example.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  rejectUnauthorized: false\n};\nconst req = https.request(options, (res) => {\n  res.on('data', (d) => {\n    process.stdout.write(d);\n  });\n});\nreq.on('error', (e) => {\n  console.error(e);\n});\nreq.end();",
            "description": "This code does not verify the server hostname during an SSL/TLS connection, making it vulnerable to man-in-the-middle attacks.",
            "pattern": "https.request\\(.*rejectUnauthorized:\\s*false.*\\)"
          }
        ]
      },
      "fix": {
        "steps": [
          "Ensure that SSL/TLS connections verify server hostnames.",
          "Set 'rejectUnauthorized' to true and implement 'checkServerIdentity' to verify the hostname against the certificate.",
          "Review the code to ensure that all SSL/TLS connections are secure and properly verify server hostnames."
        ],
        "examples": [
          {
            "code": "const https = require('https');\nconst options = {\n  hostname: 'example.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  rejectUnauthorized: true,\n  checkServerIdentity: (host, cert) => {\n    const err = https.checkServerIdentity(host, cert);\n    if (err) {\n      throw err;\n    }\n  }\n};\nconst req = https.request(options, (res) => {\n  res.on('data', (d) => {\n    process.stdout.write(d);\n  });\n});\nreq.on('error', (e) => {\n  console.error(e);\n});\nreq.end();",
            "description": "This compliant solution ensures that the server hostname is verified during an SSL/TLS connection, mitigating the risk of man-in-the-middle attacks."
          }
        ]
      },
      "rationale": "Verifying server hostnames during SSL/TLS connections is essential for establishing trust and ensuring secure communication. Disabling hostname verification removes a critical security check, making the system vulnerable to man-in-the-middle attacks and impersonation by malicious actors."
    },
    {
      "id": "JS018",
      "title": "Server Certificates Should Be Verified During SSL/TLS Connections",
      "description": "Detects instances where SSL/TLS connections do not verify server certificates, making it possible for attackers to intercept encrypted communications.",
      "impact": "Critical",
      "category": "Security",
      "tags": ["trustworthy", "security", "vulnerability", "critical", "cwe", "privacy", "ssl"],
      "severity": "Blocker",
      "cwe": "CWE-295: Improper Certificate Validation",
      "examples": {
        "positive": [
          {
            "code": "const https = require('https');\nconst options = {\n  hostname: 'example.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  rejectUnauthorized: true,\n  checkServerIdentity: (host, cert) => {\n    const err = https.checkServerIdentity(host, cert);\n    if (err) {\n      throw err;\n    }\n  }\n};\nconst req = https.request(options, (res) => {\n  res.on('data', (d) => {\n    process.stdout.write(d);\n  });\n});\nreq.on('error', (e) => {\n  console.error(e);\n});\nreq.end();",
            "description": "This code securely verifies the server certificate during an SSL/TLS connection."
          }
        ],
        "negative": [
          {
            "code": "const https = require('https');\nconst options = {\n  hostname: 'example.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  rejectUnauthorized: false\n};\nconst req = https.request(options, (res) => {\n  res.on('data', (d) => {\n    process.stdout.write(d);\n  });\n});\nreq.on('error', (e) => {\n  console.error(e);\n});\nreq.end();",
            "description": "This code does not verify the server certificate during an SSL/TLS connection, making it vulnerable to man-in-the-middle attacks.",
            "pattern": "https.request\\(.*rejectUnauthorized:\\s*false.*\\)"
          }
        ]
      },
      "fix": {
        "steps": [
          "Ensure that SSL/TLS connections verify server certificates.",
          "Set 'rejectUnauthorized' to true and implement 'checkServerIdentity' to verify the server's certificate.",
          "Review the code to ensure that all SSL/TLS connections are secure and properly verify server certificates."
        ],
        "examples": [
          {
            "code": "const https = require('https');\nconst options = {\n  hostname: 'example.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  rejectUnauthorized: true,\n  checkServerIdentity: (host, cert) => {\n    const err = https.checkServerIdentity(host, cert);\n    if (err) {\n      throw err;\n    }\n  }\n};\nconst req = https.request(options, (res) => {\n  res.on('data', (d) => {\n    process.stdout.write(d);\n  });\n});\nreq.on('error', (e) => {\n  console.error(e);\n});\nreq.end();",
            "description": "This compliant solution ensures that the server certificate is verified during an SSL/TLS connection, mitigating the risk of man-in-the-middle attacks."
          }
        ]
      },
      "rationale": "Verifying server certificates during SSL/TLS connections is essential for establishing trust and ensuring secure communication. Disabling certificate verification removes a critical security check, making the system vulnerable to man-in-the-middle attacks and impersonation by malicious actors."
    },
    {
      "id": "JS019",
      "title": "Cryptographic Keys Should Be Robust",
      "description": "Detects instances where cryptographic keys are not robust, exposing encrypted data to attacks aimed at recovering the plaintext.",
      "impact": "Critical",
      "category": "Security",
      "tags": ["trustworthy", "security", "vulnerability", "critical", "cwe", "privacy"],
      "severity": "Blocker",
      "cwe": "CWE-326: Inadequate Encryption Strength",
      "examples": {
        "positive": [
          {
            "code": "const crypto = require('crypto');\nconst key = crypto.randomBytes(32); // 256-bit key for AES-256\nconst iv = crypto.randomBytes(16);\nconst algorithm = 'aes-256-cbc';\nconst cipher = crypto.createCipheriv(algorithm, key, iv);\nlet encrypted = cipher.update('some clear text data', 'utf8', 'hex');\nencrypted += cipher.final('hex');",
            "description": "This code uses a robust 256-bit key for AES-256 encryption, ensuring strong security."
          }
        ],
        "negative": [
          {
            "code": "const crypto = require('crypto');\nconst key = 'weak-key'; // Weak key for encryption\nconst algorithm = 'aes-128-cbc';\nconst iv = crypto.randomBytes(16);\nconst cipher = crypto.createCipheriv(algorithm, key, iv);\nlet encrypted = cipher.update('some clear text data', 'utf8', 'hex');\nencrypted += cipher.final('hex');",
            "description": "This code uses a weak key for AES-128 encryption, making it vulnerable to cryptographic attacks.",
            "pattern": "crypto.createCipheriv\\(.*'aes-128-cbc'.*\\)|crypto.createCipheriv\\(.*, 'weak-key'.*\\)"
          }
        ]
      },
      "fix": {
        "steps": [
          "Ensure that cryptographic keys are robust and meet recommended length requirements.",
          "Use secure methods to generate cryptographic keys, such as `crypto.randomBytes` for generating strong keys.",
          "Review the code to ensure that all cryptographic operations use strong and secure keys."
        ],
        "examples": [
          {
            "code": "const crypto = require('crypto');\nconst key = crypto.randomBytes(32); // 256-bit key for AES-256\nconst iv = crypto.randomBytes(16);\nconst algorithm = 'aes-256-cbc';\nconst cipher = crypto.createCipheriv(algorithm, key, iv);\nlet encrypted = cipher.update('some clear text data', 'utf8', 'hex');\nencrypted += cipher.final('hex');",
            "description": "This compliant solution uses a robust 256-bit key for AES-256 encryption, ensuring strong security."
          }
        ]
      },
      "rationale": "Using robust cryptographic keys is essential for protecting sensitive information and ensuring secure communications. Weak keys can expose encrypted data to attacks aimed at recovering the plaintext, potentially leading to significant data breaches and other security risks."
    },
    {
      "id": "JS020",
      "title": "Weak SSL/TLS Protocols Should Not Be Used",
      "description": "Detects instances where weak SSL/TLS protocols are used, exposing encrypted data to a number of attacks aimed at recovering the plaintext.",
      "impact": "Critical",
      "category": "Security",
      "tags": ["trustworthy", "security", "vulnerability", "critical", "cwe", "privacy", "ssl", "tls"],
      "severity": "Blocker",
      "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
      "examples": {
        "positive": [
          {
            "code": "const https = require('https');\nconst options = {\n  hostname: 'example.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  secureProtocol: 'TLSv1_2_method'\n};\nconst req = https.request(options, (res) => {\n  res.on('data', (d) => {\n    process.stdout.write(d);\n  });\n});\nreq.on('error', (e) => {\n  console.error(e);\n});\nreq.end();",
            "description": "This code uses a strong TLS 1.2 protocol, ensuring secure communication."
          }
        ],
        "negative": [
          {
            "code": "const https = require('https');\nconst options = {\n  hostname: 'example.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  secureProtocol: 'SSLv3_method'\n};\nconst req = https.request(options, (res) => {\n  res.on('data', (d) => {\n    process.stdout.write(d);\n  });\n});\nreq.on('error', (e) => {\n  console.error(e);\n});\nreq.end();",
            "description": "This code uses a weak SSL 3.0 protocol, making it vulnerable to cryptographic attacks.",
            "pattern": "https.request\\(.*secureProtocol:\\s*['\"]SSLv3_method['\"]\\)"
          }
        ]
      },
      "fix": {
        "steps": [
          "Ensure that only strong SSL/TLS protocols are used in your code.",
          "Replace deprecated protocols (e.g., SSLv3, TLS 1.0, TLS 1.1) with secure ones (e.g., TLS 1.2, TLS 1.3).",
          "Review the code to ensure that all SSL/TLS connections use strong and secure protocols."
        ],
        "examples": [
          {
            "code": "const https = require('https');\nconst options = {\n  hostname: 'example.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  secureProtocol: 'TLSv1_2_method'\n};\nconst req = https.request(options, (res) => {\n  res.on('data', (d) => {\n    process.stdout.write(d);\n  });\n});\nreq.on('error', (e) => {\n  console.error(e);\n});\nreq.end();",
            "description": "This compliant solution uses a strong TLS 1.2 protocol, ensuring secure communication."
          }
        ]
      },
      "rationale": "Using strong SSL/TLS protocols is essential for protecting sensitive information and ensuring secure communications. Weak protocols can expose encrypted data to attacks aimed at recovering the plaintext, potentially leading to significant data breaches and other security risks."
    },
    {
      "id": "JS021",
      "title": "Origins Should Be Verified During Cross-Origin Communications",
      "description": "Detects instances where origins are not verified during cross-origin communications, exposing the application to potential data breaches and unauthorized actions.",
      "impact": "Critical",
      "category": "Security",
      "tags": ["intentionality", "complete", "security", "vulnerability", "critical", "cwe", "html5"],
      "severity": "Blocker",
      "cwe": "CWE-345: Insufficient Verification of Data Authenticity",
      "examples": {
        "positive": [
          {
            "code": "window.addEventListener('message', (event) => {\n  if (event.origin === 'https://trusted-origin.com') {\n    // handle message\n  } else {\n    console.warn('Untrusted origin:', event.origin);\n  }\n}, false);",
            "description": "This code verifies the origin of the message before handling it, ensuring secure cross-origin communication."
          }
        ],
        "negative": [
          {
            "code": "window.addEventListener('message', (event) => {\n  // handle message without verifying origin\n  const data = event.data;\n  console.log(data);\n}, false);",
            "description": "This code does not verify the origin of the message before handling it, making it vulnerable to malicious cross-origin communications.",
            "pattern": "window.addEventListener\\('message',\\s*function\\(event\\)\\s*\\{[^}]*\\},\\s*false\\)"
          }
        ]
      },
      "fix": {
        "steps": [
          "Ensure that all cross-origin communications verify the origin before handling data.",
          "Implement origin checks using `event.origin` for message events and similar checks for other types of cross-origin communications.",
          "Review the code to ensure that no cross-origin communication handles data without proper origin verification."
        ],
        "examples": [
          {
            "code": "window.addEventListener('message', (event) => {\n  if (event.origin === 'https://trusted-origin.com') {\n    // handle message\n  } else {\n    console.warn('Untrusted origin:', event.origin);\n  }\n}, false);",
            "description": "This compliant solution verifies the origin of the message before handling it, ensuring secure cross-origin communication."
          }
        ]
      },
      "rationale": "Verifying the origins during cross-origin communications is essential to distinguish between legitimate requests and malicious ones. Failure to do so can lead to data breaches, unauthorized actions, and other security risks."
    },
    {
      "id": "JS022",
      "title": "Regular Expressions Should Not Be Vulnerable to Denial of Service Attacks",
      "description": "Detects instances where regular expressions may be vulnerable to Denial of Service (DoS) attacks due to catastrophic backtracking.",
      "impact": "Critical",
      "category": "Security",
      "tags": ["intentionality", "efficient", "security", "vulnerability", "critical", "injection", "cwe", "denial-of-service"],
      "severity": "Blocker",
      "cwe": "CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')",
      "examples": {
        "positive": [
          {
            "code": "const safeRegex = /^(?:\\d{1,3}\\.){3}\\d{1,3}$/;\nconst testString = '192.168.1.1';\nsafeRegex.test(testString);",
            "description": "This code uses a simple and safe regular expression that avoids catastrophic backtracking."
          }
        ],
        "negative": [
          {
            "code": "const unsafeRegex = /^(a+)+$/;\nconst testString = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa';\nunsafeRegex.test(testString);",
            "description": "This code uses a vulnerable regular expression that can cause catastrophic backtracking, leading to a DoS attack.",
            "pattern": "/\\(.*\\+.*\\)+/"
          }
        ]
      },
      "fix": {
        "steps": [
          "Avoid using regular expressions that contain nested quantifiers or patterns that can lead to catastrophic backtracking.",
          "Use safe regular expression patterns that are designed to handle large inputs efficiently.",
          "Review and test regular expressions to ensure they do not exhibit exponential complexity."
        ],
        "examples": [
          {
            "code": "const safeRegex = /^(?:\\d{1,3}\\.){3}\\d{1,3}$/;\nconst testString = '192.168.1.1';\nsafeRegex.test(testString);",
            "description": "This compliant solution uses a simple and safe regular expression that avoids catastrophic backtracking."
          }
        ]
      },
      "rationale": "Using regular expressions that are vulnerable to Denial of Service (DoS) attacks can cause significant performance issues and potentially make the application unavailable. Avoiding patterns that lead to catastrophic backtracking is essential to maintain the efficiency and security of the application."
    },
    {
      "id": "JS023",
      "title": "File Uploads Should Be Restricted",
      "description": "Detects instances where file uploads are not properly restricted, which can lead to security vulnerabilities such as malicious file uploads.",
      "impact": "Critical",
      "category": "Security",
      "tags": ["intentionality", "complete", "security", "vulnerability", "critical", "cwe", "express.js"],
      "severity": "Blocker",
      "cwe": "CWE-434: Unrestricted Upload of File with Dangerous Type",
      "examples": {
        "positive": [
          {
            "code": "const express = require('express');\nconst multer = require('multer');\nconst app = express();\nconst upload = multer({\n  dest: 'uploads/',\n  limits: { fileSize: 1 * 1024 * 1024 }, // 1 MB limit\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype !== 'image/png' && file.mimetype !== 'image/jpeg') {\n      return cb(new Error('Only .png and .jpg files are allowed!'));\n    }\n    cb(null, true);\n  }\n});\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
            "description": "This code restricts file uploads to .png and .jpg files and limits the file size to 1 MB, ensuring secure file uploads."
          }
        ],
        "negative": [
          {
            "code": "const express = require('express');\nconst multer = require('multer');\nconst app = express();\nconst upload = multer({ dest: 'uploads/' });\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
            "description": "This code does not restrict file types or sizes, making it vulnerable to malicious file uploads.",
            "pattern": "multer\\(\\{\\s*dest: 'uploads/'\\s*\\}\\)"
          }
        ]
      },
      "fix": {
        "steps": [
          "Restrict file uploads to specific types (e.g., images only) by checking the file mimetype.",
          "Set a limit on the file size to prevent large file uploads that could exhaust server resources.",
          "Store uploaded files in a directory that is not accessible to the public to prevent direct access to uploaded files."
        ],
        "examples": [
          {
            "code": "const express = require('express');\nconst multer = require('multer');\nconst app = express();\nconst upload = multer({\n  dest: 'uploads/',\n  limits: { fileSize: 1 * 1024 * 1024 }, // 1 MB limit\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype !== 'image/png' && file.mimetype !== 'image/jpeg') {\n      return cb(new Error('Only .png and .jpg files are allowed!'));\n    }\n    cb(null, true);\n  }\n});\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
            "description": "This compliant solution restricts file uploads to .png and .jpg files, limits the file size to 1 MB, and stores files in a secure directory."
          }
        ]
      },
      "rationale": "Restricting file uploads is essential to prevent security vulnerabilities such as malicious file uploads, which can lead to code execution, server resource exhaustion, and other critical security issues. Implementing proper file upload restrictions ensures the security and integrity of the application."
    },
    {
      "id": "JS024",
      "title": "Applications Should Not Create Session Cookies from Untrusted Input",
      "description": "Detects instances where session cookies are created from untrusted input, exposing the application to session hijacking and other security vulnerabilities.",
      "impact": "Major",
      "category": "Security",
      "tags": ["intentionality", "complete", "security", "vulnerability", "major", "injection", "cwe"],
      "severity": "Critical",
      "cwe": "CWE-20: Improper Input Validation",
      "examples": {
        "positive": [
          {
            "code": "const express = require('express');\nconst cookieParser = require('cookie-parser');\nconst app = express();\napp.use(cookieParser());\napp.get('/login', (req, res) => {\n  const userId = req.query.userId;\n  // Validate the userId properly before using it\n  if (isValidUserId(userId)) {\n    res.cookie('session', generateSessionToken(userId), { httpOnly: true, secure: true });\n    res.send('Logged in');\n  } else {\n    res.status(400).send('Invalid user ID');\n  }\n});\nfunction isValidUserId(userId) {\n  // Implement proper validation logic for userId\n  return /^[a-zA-Z0-9_-]{3,20}$/.test(userId);\n}\nfunction generateSessionToken(userId) {\n  // Implement session token generation logic\n  return `token-${userId}-${Date.now()}`;\n}\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
            "description": "This code properly validates the userId before using it to create a session cookie, ensuring secure session management."
          }
        ],
        "negative": [
          {
            "code": "const express = require('express');\nconst cookieParser = require('cookie-parser');\nconst app = express();\napp.use(cookieParser());\napp.get('/login', (req, res) => {\n  const userId = req.query.userId;\n  res.cookie('session', `token-${userId}-${Date.now()}`, { httpOnly: true, secure: true });\n  res.send('Logged in');\n});\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
            "description": "This code creates a session cookie using untrusted input from req.query.userId, making it vulnerable to session hijacking and other attacks.",
            "pattern": "res\\.cookie\\(\\s*['\"]session['\"]\\s*,\\s*`token-\\$\\{req\\.query\\.userId\\}-\\$\\{Date\\.now\\(\\)\\}`\\s*\\)"
          }
        ]
      },
      "fix": {
        "steps": [
          "Avoid using untrusted input directly to create session cookies.",
          "Validate and sanitize any input used for creating session cookies.",
          "Implement proper input validation logic to ensure the integrity and security of session tokens."
        ],
        "examples": [
          {
            "code": "const express = require('express');\nconst cookieParser = require('cookie-parser');\nconst app = express();\napp.use(cookieParser());\napp.get('/login', (req, res) => {\n  const userId = req.query.userId;\n  // Validate the userId properly before using it\n  if (isValidUserId(userId)) {\n    res.cookie('session', generateSessionToken(userId), { httpOnly: true, secure: true });\n    res.send('Logged in');\n  } else {\n    res.status(400).send('Invalid user ID');\n  }\n});\nfunction isValidUserId(userId) {\n  // Implement proper validation logic for userId\n  return /^[a-zA-Z0-9_-]{3,20}$/.test(userId);\n}\nfunction generateSessionToken(userId) {\n  // Implement session token generation logic\n  return `token-${userId}-${Date.now()}`;\n}\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
            "description": "This compliant solution properly validates the userId before using it to create a session cookie, ensuring secure session management."
          }
        ]
      },
      "rationale": "Creating session cookies from untrusted input can lead to serious security vulnerabilities, including session hijacking and sensitive data disclosure. Proper validation and sanitization of input used for session management is essential to maintain the security and integrity of the application."
    },
    {
      "id": "JS025",
      "title": "Server-Side Requests Should Not Be Vulnerable to Forging Attacks",
      "description": "Detects instances where server-side requests can be forged, potentially allowing attackers to coerce the server into performing arbitrary requests on their behalf.",
      "impact": "Major",
      "category": "Security",
      "tags": ["intentionality", "complete", "security", "vulnerability", "major", "injection", "cwe"],
      "severity": "Critical",
      "cwe": "CWE-918: Server-Side Request Forgery (SSRF)",
      "examples": {
        "positive": [
          {
            "code": "const axios = require('axios');\nconst express = require('express');\nconst app = express();\napp.get('/fetch-data', async (req, res) => {\n  const url = req.query.url;\n  if (isValidUrl(url)) {\n    try {\n      const response = await axios.get(url);\n      res.json(response.data);\n    } catch (error) {\n      res.status(500).send('Error fetching data');\n    }\n  } else {\n    res.status(400).send('Invalid URL');\n  }\n});\nfunction isValidUrl(url) {\n  const urlPattern = /^(https?:\\/\\/)?([\\da-z.-]+)\\.([a-z.]{2,6})([\\/\\w .-]*)*\\/?$/;\n  return urlPattern.test(url);\n}\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
            "description": "This code validates the URL before making a server-side request, preventing SSRF vulnerabilities."
          }
        ],
        "negative": [
          {
            "code": "const axios = require('axios');\nconst express = require('express');\nconst app = express();\napp.get('/fetch-data', async (req, res) => {\n  const url = req.query.url;\n  try {\n    const response = await axios.get(url);\n    res.json(response.data);\n  } catch (error) {\n    res.status(500).send('Error fetching data');\n  }\n});\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
            "description": "This code makes a server-side request using untrusted input from req.query.url, making it vulnerable to SSRF attacks.",
            "pattern": "axios\\.get\\(req\\.query\\.url\\)"
          }
        ]
      },
      "fix": {
        "steps": [
          "Validate and sanitize any input used to construct server-side requests.",
          "Implement proper URL validation logic to ensure the integrity and security of the requests.",
          "Consider using allow-lists for URLs to limit the destinations of server-side requests."
        ],
        "examples": [
          {
            "code": "const axios = require('axios');\nconst express = require('express');\nconst app = express();\napp.get('/fetch-data', async (req, res) => {\n  const url = req.query.url;\n  if (isValidUrl(url)) {\n    try {\n      const response = await axios.get(url);\n      res.json(response.data);\n    } catch (error) {\n      res.status(500).send('Error fetching data');\n    }\n  } else {\n    res.status(400).send('Invalid URL');\n  }\n});\nfunction isValidUrl(url) {\n  const urlPattern = /^(https?:\\/\\/)?([\\da-z.-]+)\\.([a-z.]{2,6})([\\/\\w .-]*)*\\/?$/;\n  return urlPattern.test(url);\n}\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
            "description": "This compliant solution validates the URL before making a server-side request, preventing SSRF vulnerabilities."
          }
        ]
      },
      "rationale": "Server-side requests forged by attackers can lead to unauthorized actions and data disclosure. Proper validation and sanitization of input used for constructing server-side requests are essential to maintain the security and integrity of the application."
    },
    {
      "id": "JS027",
      "title": "OS Commands Should Not Be Vulnerable to Argument Injection Attacks",
      "description": "Detects instances where OS command arguments are constructed from untrusted input, potentially allowing attackers to influence the behavior of executed commands.",
      "impact": "Minor",
      "category": "Security",
      "tags": ["intentionality", "complete", "security", "vulnerability", "minor", "injection", "cwe"],
      "severity": "High",
      "cwe": "CWE-88: Argument Injection or Modification",
      "examples": {
        "positive": [
          {
            "code": "const { exec } = require('child_process');\nconst express = require('express');\nconst app = express();\napp.get('/run', (req, res) => {\n  const userInput = req.query.userInput;\n  if (isValidInput(userInput)) {\n    exec(`ls ${userInput}`, (error, stdout, stderr) => {\n      if (error) {\n        res.status(500).send(`Error: ${stderr}`);\n      } else {\n        res.send(`Output: ${stdout}`);\n      }\n    });\n  } else {\n    res.status(400).send('Invalid input');\n  }\n});\nfunction isValidInput(input) {\n  return /^[a-zA-Z0-9_-]+$/.test(input);\n}\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
            "description": "This code validates the user input before using it as an argument in the OS command, preventing argument injection attacks."
          }
        ],
        "negative": [
          {
            "code": "const { exec } = require('child_process');\nconst express = require('express');\nconst app = express();\napp.get('/run', (req, res) => {\n  const userInput = req.query.userInput;\n  exec(`ls ${userInput}`, (error, stdout, stderr) => {\n    if (error) {\n      res.status(500).send(`Error: ${stderr}`);\n    } else {\n      res.send(`Output: ${stdout}`);\n    }\n  });\n});\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
            "description": "This code constructs an OS command argument from untrusted input, making it vulnerable to argument injection attacks.",
            "pattern": "exec\\(`ls \\$\\{req\\.query\\.userInput\\}`\\)"
          }
        ]
      },
      "fix": {
        "steps": [
          "Avoid using untrusted input directly to construct OS command arguments.",
          "Validate and sanitize any input used in OS command arguments.",
          "Use parameterized methods or safer alternatives where possible."
        ],
        "examples": [
          {
            "code": "const { execFile } = require('child_process');\nconst express = require('express');\nconst app = express();\napp.get('/run', (req, res) => {\n  const userInput = req.query.userInput;\n  if (isValidInput(userInput)) {\n    execFile('ls', [userInput], (error, stdout, stderr) => {\n      if (error) {\n        res.status(500).send(`Error: ${stderr}`);\n      } else {\n        res.send(`Output: ${stdout}`);\n      }\n    });\n  } else {\n    res.status(400).send('Invalid input');\n  }\n});\nfunction isValidInput(input) {\n  return /^[a-zA-Z0-9_-]+$/.test(input);\n}\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
            "description": "This compliant solution validates the user input before using it in a parameterized OS command, preventing argument injection attacks."
          }
        ]
      },
      "rationale": "Constructing OS command arguments from untrusted input without validation can lead to argument injection attacks. Proper validation and sanitization of input are essential to maintain the security and integrity of the application."
    },
    {
      "id": "JS028",
      "title": "Web SQL Databases Should Not Be Used",
      "description": "Detects instances where Web SQL databases are used, which are deprecated and pose security risks.",
      "impact": "Blocker",
      "category": "Security",
      "tags": ["consistency", "conventional", "security", "vulnerability", "blocker", "type-dependent"],
      "severity": "High",
      "cwe": "CWE-94: Improper Control of Generation of Code ('Code Injection')",
      "examples": {
        "positive": [
          {
            "code": "const db = indexedDB.open('myDb', 1);\ndb.onupgradeneeded = (event) => {\n  const db = event.target.result;\n  db.createObjectStore('store', { keyPath: 'id' });\n};\ndb.onsuccess = () => {\n  console.log('Database opened successfully');\n};",
            "description": "This code uses IndexedDB, which is a recommended alternative to Web SQL Database."
          }
        ],
        "negative": [
          {
            "code": "var db = window.openDatabase('myDb', '1.0', 'Personal secrets stored here', 2 * 1024 * 1024);",
            "description": "This code uses Web SQL Database, which is deprecated and should not be used.",
            "pattern": "window\\.openDatabase\\("
          }
        ]
      },
      "fix": {
        "steps": [
          "Replace Web SQL Database with a modern alternative like IndexedDB or Web Storage.",
          "Ensure data is securely stored and accessed using supported and recommended methods."
        ],
        "examples": [
          {
            "code": "const db = indexedDB.open('myDb', 1);\ndb.onupgradeneeded = (event) => {\n  const db = event.target.result;\n  db.createObjectStore('store', { keyPath: 'id' });\n};\ndb.onsuccess = () => {\n  console.log('Database opened successfully');\n};",
            "description": "This compliant solution uses IndexedDB instead of Web SQL Database."
          }
        ]
      },
      "rationale": "The Web SQL Database standard was deprecated by the W3C and is not supported in all browsers, posing compatibility and security risks. Using modern alternatives like IndexedDB ensures better security and broader compatibility."
    },
    {
      "id": "JS029",
      "title": "Local Storage and Session Storage Should Not Be Used",
      "description": "Detects instances where localStorage and sessionStorage are used, which can pose security risks by storing data in an unencrypted format accessible by any script on the page.",
      "impact": "Major",
      "category": "Security",
      "tags": ["consistency", "conventional", "security", "vulnerability", "major", "type-dependent"],
      "severity": "High",
      "cwe": "CWE-922: Insecure Storage of Sensitive Information",
      "examples": {
        "positive": [
          {
            "code": "const secureStorage = (key, value) => {\n  const encryptedValue = encrypt(value); // Hypothetical encryption function\n  document.cookie = `${key}=${encryptedValue}`;\n};\nsecureStorage('login', login);",
            "description": "This code uses a hypothetical secure storage function to store encrypted data in cookies instead of localStorage or sessionStorage."
          }
        ],
        "negative": [
          {
            "code": "localStorage.setItem('login', login);",
            "description": "This code uses localStorage to store sensitive information, which is insecure.",
            "pattern": "localStorage\\.setItem\\("
          },
          {
            "code": "sessionStorage.setItem('sessionId', sessionId);",
            "description": "This code uses sessionStorage to store sensitive information, which is insecure.",
            "pattern": "sessionStorage\\.setItem\\("
          }
        ]
      },
      "fix": {
        "steps": [
          "Avoid using localStorage and sessionStorage for storing sensitive information.",
          "Use secure storage methods such as cookies with appropriate security flags (HttpOnly, Secure) or other encrypted storage mechanisms."
        ],
        "examples": [
          {
            "code": "const secureStorage = (key, value) => {\n  const encryptedValue = encrypt(value); // Hypothetical encryption function\n  document.cookie = `${key}=${encryptedValue}`;\n};\nsecureStorage('login', login);",
            "description": "This compliant solution uses a secure storage function to store encrypted data in cookies instead of localStorage or sessionStorage."
          }
        ]
      },
      "rationale": "Using localStorage and sessionStorage for sensitive data is insecure because the data is stored in an unencrypted format that can be accessed by any script on the page. Using secure storage methods helps protect sensitive information from unauthorized access."
    },
    {
      "id": "JS030",
      "title": "Debugger Statements Should Not Be Used",
      "description": "Detects instances where debugger statements are used in the code, which can lead to unexpected behavior and potential vulnerabilities in production environments.",
      "impact": "Minor",
      "category": "Code Quality",
      "tags": ["consistency", "conventional", "security", "vulnerability", "minor", "type-dependent"],
      "severity": "Low",
      "cwe": "CWE-489: Leftover Debug Code",
      "examples": {
        "positive": [
          {
            "code": "for (let i = 1; i < 5; i++) {\n  // Print i to the Output window.\n  console.log('loop index is ' + i);\n}",
            "description": "This compliant code does not use debugger statements and instead logs information to the console."
          }
        ],
        "negative": [
          {
            "code": "for (let i = 1; i < 5; i++) {\n  // Print i to the Output window.\n  console.log('loop index is ' + i);\n  debugger;\n}",
            "description": "This code uses a debugger statement, which should be removed.",
            "pattern": "debugger;"
          }
        ]
      },
      "fix": {
        "steps": [
          "Remove debugger statements from the source code.",
          "Use console.log or other logging methods to debug information during development."
        ],
        "examples": [
          {
            "code": "for (let i = 1; i < 5; i++) {\n  // Print i to the Output window.\n  console.log('loop index is ' + i);\n}",
            "description": "This compliant solution removes the debugger statement and uses console.log for debugging information."
          }
        ]
      },
      "rationale": "Debugger statements should be removed from production code to prevent unexpected behavior and potential vulnerabilities. Using appropriate logging methods ensures that debugging information can be accessed without impacting the production environment."
    },
    {
      "id": "JS031",
      "title": "Alert, Confirm, and Prompt Should Not Be Used",
      "description": "Detects instances where alert, confirm, and prompt functions are used, which can expose sensitive information to attackers and should not be used in production code.",
      "impact": "Minor",
      "category": "Code Quality",
      "tags": ["consistency", "conventional", "security", "vulnerability", "minor", "type-dependent"],
      "severity": "Low",
      "cwe": "CWE-488: Exposure of Data Elements to Wrong Session",
      "examples": {
        "positive": [
          {
            "code": "if (unexpectedCondition) {\n  console.log('Unexpected Condition');\n}",
            "description": "This compliant code logs the unexpected condition to the console instead of using an alert."
          }
        ],
        "negative": [
          {
            "code": "if (unexpectedCondition) {\n  alert('Unexpected Condition');\n}",
            "description": "This code uses an alert to notify about an unexpected condition, which should be avoided.",
            "pattern": "alert\\("
          },
          {
            "code": "if (userConfirmation) {\n  confirm('Are you sure?');\n}",
            "description": "This code uses confirm to get user confirmation, which should be avoided.",
            "pattern": "confirm\\("
          },
          {
            "code": "if (userInputRequired) {\n  prompt('Please enter your name:');\n}",
            "description": "This code uses prompt to get user input, which should be avoided.",
            "pattern": "prompt\\("
          }
        ]
      },
      "fix": {
        "steps": [
          "Remove alert, confirm, and prompt statements from the source code.",
          "Use console.log or other appropriate logging methods to debug information during development.",
          "Implement custom modal dialogs for user interactions in production environments."
        ],
        "examples": [
          {
            "code": "if (unexpectedCondition) {\n  console.log('Unexpected Condition');\n}",
            "description": "This compliant solution uses console.log to log unexpected conditions instead of using alert."
          }
        ]
      },
      "rationale": "Alert, confirm, and prompt functions can expose sensitive information and disrupt user experience. Using console.log for debugging and custom modal dialogs for user interactions ensures better security and user experience."
    } 
  ]
}

      {
        "id": "JS002",
        "description": "Detect potential XSS in innerHTML assignments",
        "pattern": "\\.innerHTML\\s*=\\s*",
        "severity": "high",
        "recommendation": "Sanitize input before assigning to innerHTML. Consider using textContent or other safer methods."
      },
      {
        "id": "JS003",
        "description": "Detect potential XSS in document.write()",
        "pattern": "document\\.write\\s*\\(",
        "severity": "high",
        "recommendation": "Avoid using document.write(). Use safer methods like DOM manipulation APIs."
      },
      {
        "id": "JS004",
        "description": "Detect insecure usage of setTimeout() or setInterval() with string arguments",
        "pattern": "setTimeout\\s*\\(\\s*['\"]",
        "severity": "medium",
        "recommendation": "Avoid using string arguments in setTimeout() or setInterval(). Use function expressions or declarations instead."
      },
      {
        "id": "JS005",
        "description": "Detect insecure AJAX requests without proper validation",
        "pattern": "\\$.ajax\\s*\\(.*\\)",
        "severity": "medium",
        "recommendation": "Ensure all AJAX requests validate and sanitize input data. Use proper headers and parameter encoding."
      },
      {
        "id": "JS006",
        "description": "Detect potential SQL Injection via concatenated SQL query strings",
        "pattern": "\\+\\s*['\"].*['\"]\\s*\\+",
        "severity": "high",
        "recommendation": "Use parameterized queries or prepared statements to prevent SQL Injection."
      },
      {
        "id": "JS007",
        "description": "Detect hardcoded sensitive information",
        "pattern": "(password|apiKey|secret)\\s*[:=]\\s*['\"].+['\"]",
        "severity": "high",
        "recommendation": "Avoid hardcoding sensitive information in the source code. Use environment variables or secure storage solutions."
      },
      {
        "id": "JS008",
        "description": "Detect usage of deprecated JavaScript functions",
        "pattern": "\\b(escape|unescape|with|alert|prompt|confirm)\\b",
        "severity": "low",
        "recommendation": "Avoid using deprecated functions. Refer to modern alternatives and best practices."
      },
      {
        "id": "JS009",
        "description": "Detect unhandled promise rejections",
        "pattern": "\\.then\\s*\\(.*\\)\\s*\\.catch\\s*\\(.*\\)\\s*\\.finally\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure all promises have proper error handling using catch() or try-catch blocks with async/await."
      },
      {
        "id": "JS010",
        "description": "Detect usage of unsafe regular expressions",
        "pattern": "/(\\(.+\\)|\\[.*\\]|\\{.*\\})/g",
        "severity": "medium",
        "recommendation": "Validate and sanitize user input used in regular expressions. Avoid complex and inefficient regex patterns that may lead to ReDoS (Regular Expression Denial of Service)."
      },
      {
        "id": "JS011",
        "description": "Detect usage of localStorage for sensitive data",
        "pattern": "\\blocalStorage\\.setItem\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid storing sensitive data in localStorage. Use secure cookies or other secure storage solutions."
      },
      {
        "id": "JS012",
        "description": "Detect lack of input validation in forms",
        "pattern": "\\bform\\b.*\\.submit\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure all form inputs are properly validated and sanitized before submission."
      },
      {
        "id": "JS013",
        "description": "Detect insecure use of WebSocket connections",
        "pattern": "\\bnew\\s+WebSocket\\s*\\(",
        "severity": "high",
        "recommendation": "Use secure WebSocket connections (wss://) and validate all input and output data."
      },
      {
        "id": "JS014",
        "description": "Detect usage of insecure random number generation",
        "pattern": "\\bMath\\.random\\s*\\(",
        "severity": "medium",
        "recommendation": "Use cryptographically secure random number generators like window.crypto.getRandomValues() for security-sensitive operations."
      },
      {
        "id": "JS015",
        "description": "Detect lack of Content Security Policy (CSP)",
        "pattern": "<meta\\s+http-equiv=['\"]Content-Security-Policy['\"]",
        "severity": "medium",
        "recommendation": "Implement a strong Content Security Policy (CSP) to mitigate XSS and other injection attacks."
      },
      {
        "id": "JS016",
        "description": "Detect insecure usage of window.open()",
        "pattern": "window\\.open\\s*\\(",
        "severity": "low",
        "recommendation": "Avoid using window.open() with user-supplied URLs. Use strict URL validation and consider other methods for opening new windows."
      },
      {
        "id": "JS017",
        "description": "Detect potential insecure use of postMessage()",
        "pattern": "\\bwindow\\.postMessage\\s*\\(",
        "severity": "high",
        "recommendation": "Validate the target origin and message content in postMessage() to prevent data leakage and code injection."
      },
      {
        "id": "JS018",
        "description": "Detect lack of HTTPOnly flag in cookies",
        "pattern": "document\\.cookie\\s*=",
        "severity": "high",
        "recommendation": "Set the HTTPOnly flag on cookies to prevent access from JavaScript and mitigate XSS attacks."
      },
      {
        "id": "JS019",
        "description": "Detect usage of insecure cross-origin resource sharing (CORS) policy",
        "pattern": "Access-Control-Allow-Origin\\s*:\\s*\\*",
        "severity": "high",
        "recommendation": "Restrict the CORS policy to specific origins to prevent unauthorized access."
      },
      {
        "id": "JS020",
        "description": "Detect lack of encryption for sensitive data transmission",
        "pattern": "\\bhttp:\\/\\/",
        "severity": "high",
        "recommendation": "Use HTTPS for transmitting sensitive data to ensure confidentiality and integrity."
      },
      {
        "id": "JS021",
        "description": "Detect insecure usage of XMLHttpRequest without proper validation",
        "pattern": "\\bnew\\s+XMLHttpRequest\\s*\\(",
        "severity": "medium",
        "recommendation": "Validate and sanitize all data sent via XMLHttpRequest to prevent injection attacks."
      },
      {
        "id": "JS022",
        "description": "Detect missing CSRF protection tokens",
        "pattern": "csrfToken\\s*:\\s*null",
        "severity": "high",
        "recommendation": "Implement CSRF protection using tokens to prevent cross-site request forgery attacks."
      },
      {
        "id": "JS023",
        "description": "Detect potential information leakage via console.log",
        "pattern": "console\\.log\\s*\\(",
        "severity": "low",
        "recommendation": "Avoid logging sensitive information to the console in production environments."
      },
      {
        "id": "JS024",
        "description": "Detect potential use of insecure libraries",
        "pattern": "require\\(['\"](.*)[@^~].*['\"]\\)",
        "severity": "medium",
        "recommendation": "Regularly update and audit third-party libraries for known vulnerabilities."
      },
      {
        "id": "JS025",
        "description": "Detect lack of output encoding for HTML contexts",
        "pattern": "\\binnerHTML\\b",
        "severity": "high",
        "recommendation": "Apply proper output encoding to data before inserting it into HTML contexts to prevent XSS."
      },
      {
        "id": "JS026",
        "description": "Detect usage of deprecated JavaScript features",
        "pattern": "\\b(Function|arguments|event)\\b",
        "severity": "low",
        "recommendation": "Avoid using deprecated features. Refer to modern alternatives and best practices."
      },
      {
        "id": "JS027",
        "description": "Detect potential insecure file upload handling",
        "pattern": "\\binput\\s+type=['\"]file['\"]",
        "severity": "high",
        "recommendation": "Validate and sanitize file uploads. Implement proper file type and size restrictions."
      },
      {
        "id": "JS028",
        "description": "Detect usage of window.location for redirects",
        "pattern": "window\\.location\\s*=\\s*",
        "severity": "medium",
        "recommendation": "Validate and sanitize URLs before performing redirects to prevent open redirect vulnerabilities."
      },
      {
        "id": "JS029",
        "description": "Detect lack of proper error handling",
        "pattern": "\\btry\\s*\\{[^}]*\\}\\s*catch\\s*\\(\\s*\\w*\\s*\\)\\s*\\{[^}]*\\}\\s*finally\\s*\\{[^}]*\\}",
        "severity": "medium",
        "recommendation": "Ensure all critical operations have proper error handling mechanisms to maintain application stability."
      },
      {
        "id": "JS030",
        "description": "Detect usage of insecure random number generation with Math.random()",
        "pattern": "\\bMath\\.random\\s*\\(",
        "severity": "medium",
        "recommendation": "Use a cryptographically secure random number generator for security-sensitive operations."
      },
      {
        "id": "JS031",
        "description": "Detect usage of synchronous XMLHttpRequest",
        "pattern": "XMLHttpRequest\\(\\).open\\(.*false\\)",
        "severity": "medium",
        "recommendation": "Avoid synchronous XMLHttpRequest as it can block the main thread and degrade performance. Use asynchronous requests instead."
      },
      {
        "id": "JS032",
        "description": "Detect insecure usage of fetch without credentials",
        "pattern": "fetch\\s*\\(.*\\)",
        "severity": "medium",
        "recommendation": "Ensure fetch requests include credentials if needed and validate responses."
      },
      {
        "id": "JS033",
        "description": "Detect usage of Function constructor",
        "pattern": "\\bFunction\\s*\\(",
        "severity": "high",
        "recommendation": "Avoid using the Function constructor as it can lead to code injection vulnerabilities. Use safer alternatives."
      },
      {
        "id": "JS034",
        "description": "Detect insecure usage of window.location.href for redirects",
        "pattern": "window\\.location\\.href\\s*=\\s*",
        "severity": "medium",
        "recommendation": "Validate and sanitize URLs before assigning them to window.location.href to prevent open redirect vulnerabilities."
      },
      {
        "id": "JS035",
        "description": "Detect insecure usage of URL.createObjectURL",
        "pattern": "URL\\.createObjectURL\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure proper handling of blob URLs and revoke them when no longer needed to avoid memory leaks."
      },
      {
        "id": "JS036",
        "description": "Detect lack of security headers",
        "pattern": "res\\.setHeader\\s*\\(",
        "severity": "high",
        "recommendation": "Implement security headers like Content-Security-Policy, X-Content-Type-Options, and X-Frame-Options to enhance security."
      },
      {
        "id": "JS037",
        "description": "Detect insecure usage of document.cookie without secure flag",
        "pattern": "document\\.cookie\\s*=\\s*",
        "severity": "high",
        "recommendation": "Set the secure flag on cookies to ensure they are only sent over HTTPS."
      },
      {
        "id": "JS038",
        "description": "Detect lack of validation for URL parameters",
        "pattern": "location\\.search",
        "severity": "high",
        "recommendation": "Validate and sanitize URL parameters to prevent injection attacks."
      },
      {
        "id": "JS039",
        "description": "Detect lack of CSP for script-src",
        "pattern": "Content-Security-Policy.*script-src",
        "severity": "high",
        "recommendation": "Implement a strict Content-Security-Policy for script-src to mitigate XSS attacks."
      },
      {
        "id": "JS040",
        "description": "Detect usage of dangerous DOM properties",
        "pattern": "\\b(innerHTML|outerHTML|document.write)\\b",
        "severity": "high",
        "recommendation": "Avoid using dangerous DOM properties. Use safer methods like textContent or DOM manipulation APIs."
      },
      {
        "id": "JS041",
        "description": "Detect usage of weak cryptographic algorithms",
        "pattern": "\\b(md5|sha1|DES|RC4)\\b",
        "severity": "high",
        "recommendation": "Avoid using weak cryptographic algorithms. Use stronger algorithms like SHA-256 or AES."
      },
      {
        "id": "JS042",
        "description": "Detect usage of innerText instead of textContent",
        "pattern": "\\binnerText\\b",
        "severity": "low",
        "recommendation": "Use textContent instead of innerText for better performance and security."
      },
      {
        "id": "JS043",
        "description": "Detect missing or insecure Cross-Origin Resource Sharing (CORS) configuration",
        "pattern": "Access-Control-Allow-Origin",
        "severity": "high",
        "recommendation": "Ensure CORS is configured securely, restricting allowed origins as much as possible."
      },
      {
        "id": "JS044",
        "description": "Detect usage of untrusted code libraries",
        "pattern": "require\\s*\\(['\"]",
        "severity": "medium",
        "recommendation": "Ensure all third-party libraries are from trusted sources and regularly updated."
      },
      {
        "id": "JS045",
        "description": "Detect potential unescaped user input in HTML attributes",
        "pattern": "\\bsetAttribute\\s*\\(",
        "severity": "high",
        "recommendation": "Escape and validate user inputs before using them in HTML attributes."
      },
      {
        "id": "JS046",
        "description": "Detect missing or insufficient HSTS header",
        "pattern": "Strict-Transport-Security",
        "severity": "high",
        "recommendation": "Implement HTTP Strict Transport Security (HSTS) to enforce HTTPS connections."
      },
      {
        "id": "JS047",
        "description": "Detect usage of unsafe HTML templates",
        "pattern": "\\btemplate\\b",
        "severity": "medium",
        "recommendation": "Ensure HTML templates do not contain untrusted user input to prevent XSS attacks."
      },
      {
        "id": "JS048",
        "description": "Detect usage of document.domain for subdomain communications",
        "pattern": "document\\.domain\\s*=",
        "severity": "medium",
        "recommendation": "Avoid using document.domain to relax same-origin policy. Use secure cross-origin communication techniques."
      },
      {
        "id": "JS049",
        "description": "Detect usage of the 'with' statement",
        "pattern": "\\bwith\\b",
        "severity": "low",
        "recommendation": "Avoid using the 'with' statement as it can lead to unpredictable behavior and make code harder to debug."
      },
      {
        "id": "JS050",
        "description": "Detect lack of secure SameSite attribute on cookies",
        "pattern": "document\\.cookie\\s*=",
        "severity": "high",
        "recommendation": "Set the SameSite attribute to Strict or Lax on cookies to prevent CSRF attacks."
      },
      {
        "id": "JS051",
        "description": "Detect usage of window.eval()",
        "pattern": "window\\.eval\\s*\\(",
        "severity": "high",
        "recommendation": "Avoid using window.eval() as it can lead to code injection vulnerabilities. Use safer alternatives."
      },
      {
        "id": "JS052",
        "description": "Detect insecure use of setImmediate() with string arguments",
        "pattern": "setImmediate\\s*\\(\\s*['\"]",
        "severity": "medium",
        "recommendation": "Avoid using string arguments in setImmediate(). Use function expressions or declarations instead."
      },
      {
        "id": "JS053",
        "description": "Detect usage of unsafe innerHTML assignments in jQuery",
        "pattern": "\\$\\(.*\\)\\.html\\s*\\(",
        "severity": "high",
        "recommendation": "Sanitize input before assigning to jQuery html(). Consider using text() or other safer methods."
      },
      {
        "id": "JS054",
        "description": "Detect insecure usage of window.name for data storage",
        "pattern": "window\\.name\\s*=",
        "severity": "medium",
        "recommendation": "Avoid using window.name for storing sensitive data. Use secure storage mechanisms."
      },
      {
        "id": "JS055",
        "description": "Detect usage of window.history.replaceState() with untrusted data",
        "pattern": "window\\.history\\.replaceState\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure data passed to window.history.replaceState() is sanitized to prevent XSS."
      },
      {
        "id": "JS056",
        "description": "Detect usage of window.history.pushState() with untrusted data",
        "pattern": "window\\.history\\.pushState\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure data passed to window.history.pushState() is sanitized to prevent XSS."
      },
      {
        "id": "JS057",
        "description": "Detect insecure usage of window.location.assign()",
        "pattern": "window\\.location\\.assign\\s*\\(",
        "severity": "medium",
        "recommendation": "Validate and sanitize URLs before using window.location.assign() to prevent open redirect vulnerabilities."
      },
      {
        "id": "JS058",
        "description": "Detect lack of HTTPOnly and secure flags on cookies",
        "pattern": "document\\.cookie\\s*=",
        "severity": "high",
        "recommendation": "Set HTTPOnly and secure flags on cookies to prevent access from JavaScript and ensure transmission over HTTPS."
      },
      {
        "id": "JS059",
        "description": "Detect usage of untrusted JSON.parse() input",
        "pattern": "JSON\\.parse\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure JSON input is from a trusted source before parsing to prevent malicious code execution."
      },
      {
        "id": "JS060",
        "description": "Detect lack of validation for dynamically generated script tags",
        "pattern": "document\\.createElement\\s*\\(['\"]script['\"]\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamic script URLs to prevent XSS attacks."
      },
      {
        "id": "JS061",
        "description": "Detect lack of validation for dynamically generated iframe tags",
        "pattern": "document\\.createElement\\s*\\(['\"]iframe['\"]\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamic iframe URLs to prevent XSS and clickjacking attacks."
      },
      {
        "id": "JS062",
        "description": "Detect usage of untrusted input in document.write()",
        "pattern": "document\\.write\\s*\\(",
        "severity": "high",
        "recommendation": "Avoid using document.write() with untrusted input. Use safer DOM manipulation methods."
      },
      {
        "id": "JS063",
        "description": "Detect lack of escape for user input in string literals",
        "pattern": "\\b['\"][^'\"]*\\+\\s*userInput\\s*\\+\\s*['\"][^'\"]*['\"]",
        "severity": "high",
        "recommendation": "Escape user input before using it in string literals to prevent injection attacks."
      },
      {
        "id": "JS064",
        "description": "Detect usage of untrusted data in URL query strings",
        "pattern": "\\bURL\\s*\\+\\s*['\"]\\?[^'\"]*['\"]",
        "severity": "high",
        "recommendation": "Validate and encode query parameters to prevent injection attacks."
      },
      {
        "id": "JS065",
        "description": "Detect lack of validation for dynamically generated object URLs",
        "pattern": "URL\\.createObjectURL\\s*\\(",
        "severity": "medium",
        "recommendation": "Validate data before creating object URLs to prevent potential misuse."
      },
      {
        "id": "JS066",
        "description": "Detect usage of untrusted input in document.getElementById()",
        "pattern": "document\\.getElementById\\s*\\(",
        "severity": "medium",
        "recommendation": "Sanitize and validate IDs before using them with document.getElementById() to prevent DOM-based XSS."
      },
      {
        "id": "JS067",
        "description": "Detect usage of untrusted input in document.getElementsByClassName()",
        "pattern": "document\\.getElementsByClassName\\s*\\(",
        "severity": "medium",
        "recommendation": "Sanitize and validate class names before using them with document.getElementsByClassName() to prevent DOM-based XSS."
      },
      {
        "id": "JS068",
        "description": "Detect usage of untrusted input in document.getElementsByTagName()",
        "pattern": "document\\.getElementsByTagName\\s*\\(",
        "severity": "medium",
        "recommendation": "Sanitize and validate tag names before using them with document.getElementsByTagName() to prevent DOM-based XSS."
      },
      {
        "id": "JS069",
        "description": "Detect usage of untrusted input in document.querySelector()",
        "pattern": "document\\.querySelector\\s*\\(",
        "severity": "medium",
        "recommendation": "Sanitize and validate selectors before using them with document.querySelector() to prevent DOM-based XSS."
      },
      {
        "id": "JS070",
        "description": "Detect usage of untrusted input in document.querySelectorAll()",
        "pattern": "document\\.querySelectorAll\\s*\\(",
        "severity": "medium",
        "recommendation": "Sanitize and validate selectors before using them with document.querySelectorAll() to prevent DOM-based XSS."
      },
      {
        "id": "JS071",
        "description": "Detect usage of untrusted input in JSON.stringify()",
        "pattern": "JSON\\.stringify\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure data passed to JSON.stringify() is sanitized to prevent data leakage."
      },
      {
        "id": "JS072",
        "description": "Detect lack of input validation in file uploads",
        "pattern": "input\\s*type=['\"]file['\"]",
        "severity": "high",
        "recommendation": "Validate and sanitize file uploads to prevent malicious files from being uploaded."
      },
      {
        "id": "JS073",
        "description": "Detect usage of untrusted input in setAttribute()",
        "pattern": "\\.setAttribute\\s*\\(",
        "severity": "high",
        "recommendation": "Validate and sanitize attribute values before using setAttribute() to prevent XSS."
      },
      {
        "id": "JS074",
        "description": "Detect usage of untrusted input in element.innerHTML",
        "pattern": "\\.innerHTML\\s*=",
        "severity": "high",
        "recommendation": "Avoid using innerHTML with untrusted input. Use safer methods like textContent."
      },
      {
        "id": "JS075",
        "description": "Detect usage of untrusted input in element.outerHTML",
        "pattern": "\\.outerHTML\\s*=",
        "severity": "high",
        "recommendation": "Avoid using outerHTML with untrusted input. Use safer methods like textContent."
      },
      {
        "id": "JS076",
        "description": "Detect usage of untrusted input in element.innerText",
        "pattern": "\\.innerText\\s*=",
        "severity": "medium",
        "recommendation": "Use textContent instead of innerText for better security and performance."
      },
      {
        "id": "JS077",
        "description": "Detect usage of untrusted input in element.insertAdjacentHTML",
        "pattern": "insertAdjacentHTML\\s*\\(",
        "severity": "high",
        "recommendation": "Avoid using insertAdjacentHTML with untrusted input. Use safer methods like textContent."
      },
      {
        "id": "JS078",
        "description": "Detect usage of untrusted input in element.insertAdjacentText",
        "pattern": "insertAdjacentText\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure text passed to insertAdjacentText() is sanitized to prevent XSS."
      },
      {
        "id": "JS079",
        "description": "Detect usage of untrusted input in element.outerText",
        "pattern": "\\.outerText\\s*=",
        "severity": "medium",
        "recommendation": "Use textContent instead of outerText for better security and performance."
      },
      {
        "id": "JS080",
        "description": "Detect usage of untrusted input in innerHTML within template literals",
        "pattern": "\\.innerHTML\\s*=\\s*`.*`",
        "severity": "high",
        "recommendation": "Avoid using innerHTML with template literals containing untrusted input. Use safer methods like textContent."
      },
      {
        "id": "JS081",
        "description": "Detect usage of untrusted input in outerHTML within template literals",
        "pattern": "\\.outerHTML\\s*=\\s*`.*`",
        "severity": "high",
        "recommendation": "Avoid using outerHTML with template literals containing untrusted input. Use safer methods like textContent."
      },
      {
        "id": "JS082",
        "description": "Detect usage of untrusted input in setAttribute within template literals",
        "pattern": "\\.setAttribute\\s*\\(.*`.*`",
        "severity": "high",
        "recommendation": "Validate and sanitize attribute values before using setAttribute with template literals to prevent XSS."
      },
      {
        "id": "JS083",
        "description": "Detect insecure usage of window.localStorage.getItem()",
        "pattern": "window\\.localStorage\\.getItem\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid using localStorage for sensitive data. Use secure storage mechanisms."
      },
      {
        "id": "JS084",
        "description": "Detect insecure usage of window.localStorage.setItem()",
        "pattern": "window\\.localStorage\\.setItem\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid using localStorage for sensitive data. Use secure storage mechanisms."
      },
      {
        "id": "JS085",
        "description": "Detect insecure usage of window.localStorage.removeItem()",
        "pattern": "window\\.localStorage\\.removeItem\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid using localStorage for sensitive data. Use secure storage mechanisms."
      },
      {
        "id": "JS086",
        "description": "Detect insecure usage of window.sessionStorage.getItem()",
        "pattern": "window\\.sessionStorage\\.getItem\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid using sessionStorage for sensitive data. Use secure storage mechanisms."
      },
      {
        "id": "JS087",
        "description": "Detect insecure usage of window.sessionStorage.setItem()",
        "pattern": "window\\.sessionStorage\\.setItem\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid using sessionStorage for sensitive data. Use secure storage mechanisms."
      },
      {
        "id": "JS088",
        "description": "Detect insecure usage of window.sessionStorage.removeItem()",
        "pattern": "window\\.sessionStorage\\.removeItem\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid using sessionStorage for sensitive data. Use secure storage mechanisms."
      },
      {
        "id": "JS089",
        "description": "Detect insecure usage of window.localStorage.clear()",
        "pattern": "window\\.localStorage\\.clear\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid using localStorage for sensitive data. Use secure storage mechanisms."
      },
      {
        "id": "JS090",
        "description": "Detect insecure usage of window.sessionStorage.clear()",
        "pattern": "window\\.sessionStorage\\.clear\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid using sessionStorage for sensitive data. Use secure storage mechanisms."
      },
      {
        "id": "JS091",
        "description": "Detect usage of untrusted input in window.location.search",
        "pattern": "window\\.location\\.search",
        "severity": "high",
        "recommendation": "Validate and sanitize query parameters before using them to prevent injection attacks."
      },
      {
        "id": "JS092",
        "description": "Detect lack of CSRF token in AJAX requests",
        "pattern": "\\$.ajax\\s*\\(\\s*\\{[^}]*\\}",
        "severity": "high",
        "recommendation": "Include a CSRF token in AJAX requests to prevent cross-site request forgery attacks."
      },
      {
        "id": "JS093",
        "description": "Detect lack of security headers in HTTP responses",
        "pattern": "res\\.setHeader\\s*\\(",
        "severity": "high",
        "recommendation": "Implement security headers like Content-Security-Policy, X-Content-Type-Options, and X-Frame-Options to enhance security."
      },
      {
        "id": "JS094",
        "description": "Detect insecure usage of XMLHttpRequest without proper validation",
        "pattern": "\\bnew\\s+XMLHttpRequest\\s*\\(",
        "severity": "medium",
        "recommendation": "Validate and sanitize all data sent via XMLHttpRequest to prevent injection attacks."
      },
      {
        "id": "JS095",
        "description": "Detect insecure usage of URL.searchParams",
        "pattern": "URL\\.searchParams\\.append\\s*\\(",
        "severity": "medium",
        "recommendation": "Validate and encode query parameters to prevent injection attacks."
      },
      {
        "id": "JS096",
        "description": "Detect usage of untrusted input in URL.hash",
        "pattern": "URL\\.hash\\s*=",
        "severity": "medium",
        "recommendation": "Sanitize and validate hash values before using them to prevent injection attacks."
      },
      {
        "id": "JS097",
        "description": "Detect usage of untrusted input in URL.pathname",
        "pattern": "URL\\.pathname\\s*=",
        "severity": "medium",
        "recommendation": "Sanitize and validate pathname values before using them to prevent injection attacks."
      },
      {
        "id": "JS098",
        "description": "Detect usage of untrusted input in URL.search",
        "pattern": "URL\\.search\\s*=",
        "severity": "medium",
        "recommendation": "Sanitize and validate search values before using them to prevent injection attacks."
      },
      {
        "id": "JS099",
        "description": "Detect lack of validation for dynamically generated JSONP callbacks",
        "pattern": "\\bjsonpCallback\\s*=",
        "severity": "high",
        "recommendation": "Validate JSONP callback names to prevent code injection vulnerabilities."
      },
      {
        "id": "JS100",
        "description": "Detect insecure use of postMessage without target origin",
        "pattern": "postMessage\\s*\\(\\s*['\"]",
        "severity": "high",
        "recommendation": "Specify a target origin when using postMessage to ensure messages are sent to trusted origins only."
      },
      {
        "id": "JS101",
        "description": "Detect insecure use of postMessage without data validation",
        "pattern": "postMessage\\s*\\(\\s*\\w+\\s*,\\s*['\"]",
        "severity": "high",
        "recommendation": "Validate and sanitize data before sending it via postMessage to prevent data leakage and code injection."
      },
      {
        "id": "JS102",
        "description": "Detect lack of integrity attribute in external script tags",
        "pattern": "<script\\s+src=[^>]*>",
        "severity": "medium",
        "recommendation": "Use the integrity attribute in external script tags to ensure content has not been tampered with."
      },
      {
        "id": "JS103",
        "description": "Detect insecure use of eval within setTimeout",
        "pattern": "setTimeout\\s*\\(\\s*['\"]eval",
        "severity": "high",
        "recommendation": "Avoid using eval within setTimeout. Use function expressions or declarations instead."
      },
      {
        "id": "JS104",
        "description": "Detect insecure use of eval within setInterval",
        "pattern": "setInterval\\s*\\(\\s*['\"]eval",
        "severity": "high",
        "recommendation": "Avoid using eval within setInterval. Use function expressions or declarations instead."
      },
      {
        "id": "JS105",
        "description": "Detect insecure use of eval within setImmediate",
        "pattern": "setImmediate\\s*\\(\\s*['\"]eval",
        "severity": "high",
        "recommendation": "Avoid using eval within setImmediate. Use function expressions or declarations instead."
      },
      {
        "id": "JS106",
        "description": "Detect insecure use of eval within postMessage",
        "pattern": "postMessage\\s*\\(\\s*['\"]eval",
        "severity": "high",
        "recommendation": "Avoid using eval within postMessage. Use function expressions or declarations instead."
      },
      {
        "id": "JS107",
        "description": "Detect insecure use of eval within Function constructor",
        "pattern": "new\\s+Function\\s*\\(\\s*['\"]eval",
        "severity": "high",
        "recommendation": "Avoid using eval within Function constructor. Use function expressions or declarations instead."
      },
      {
        "id": "JS108",
        "description": "Detect insecure use of eval within innerHTML",
        "pattern": "\\.innerHTML\\s*=\\s*['\"]eval",
        "severity": "high",
        "recommendation": "Avoid using eval within innerHTML. Use function expressions or declarations instead."
      },
      {
        "id": "JS109",
        "description": "Detect insecure use of eval within outerHTML",
        "pattern": "\\.outerHTML\\s*=\\s*['\"]eval",
        "severity": "high",
        "recommendation": "Avoid using eval within outerHTML. Use function expressions or declarations instead."
      },
      {
        "id": "JS110",
        "description": "Detect insecure use of eval within setAttribute",
        "pattern": "setAttribute\\s*\\(\\s*['\"]on",
        "severity": "high",
        "recommendation": "Avoid using eval within setAttribute. Use function expressions or declarations instead."
      },
      {
        "id": "JS111",
        "description": "Detect insecure use of eval within insertAdjacentHTML",
        "pattern": "insertAdjacentHTML\\s*\\(\\s*['\"]before",
        "severity": "high",
        "recommendation": "Avoid using eval within insertAdjacentHTML. Use function expressions or declarations instead."
      },
      {
        "id": "JS112",
        "description": "Detect insecure use of eval within insertAdjacentText",
        "pattern": "insertAdjacentText\\s*\\(\\s*['\"]before",
        "severity": "high",
        "recommendation": "Avoid using eval within insertAdjacentText. Use function expressions or declarations instead."
      },
      {
        "id": "JS113",
        "description": "Detect insecure use of eval within outerText",
        "pattern": "\\.outerText\\s*=\\s*['\"]eval",
        "severity": "high",
        "recommendation": "Avoid using eval within outerText. Use function expressions or declarations instead."
      },
      {
        "id": "JS114",
        "description": "Detect usage of deprecated XMLHttpRequest open method",
        "pattern": "XMLHttpRequest\\(\\).open\\(\\s*['\"]GET['\"]",
        "severity": "medium",
        "recommendation": "Use the Fetch API instead of XMLHttpRequest for better security and performance."
      },
      {
        "id": "JS115",
        "description": "Detect lack of crossorigin attribute in external script tags",
        "pattern": "<script\\s+src=[^>]*>",
        "severity": "medium",
        "recommendation": "Use the crossorigin attribute in external script tags to enable cross-origin requests with credentials."
      },
      {
        "id": "JS116",
        "description": "Detect usage of untrusted input in location.href",
        "pattern": "location\\.href\\s*=",
        "severity": "medium",
        "recommendation": "Validate and sanitize URLs before assigning them to location.href to prevent open redirect vulnerabilities."
      },
      {
        "id": "JS117",
        "description": "Detect lack of X-Frame-Options header in HTTP responses",
        "pattern": "res\\.setHeader\\s*\\(\\s*['\"]X-Frame-Options['\"]",
        "severity": "high",
        "recommendation": "Implement the X-Frame-Options header to prevent clickjacking attacks."
      },
      {
        "id": "JS118",
        "description": "Detect lack of X-Content-Type-Options header in HTTP responses",
        "pattern": "res\\.setHeader\\s*\\(\\s*['\"]X-Content-Type-Options['\"]",
        "severity": "high",
        "recommendation": "Implement the X-Content-Type-Options header to prevent MIME-type sniffing."
      },
      {
        "id": "JS119",
        "description": "Detect lack of X-XSS-Protection header in HTTP responses",
        "pattern": "res\\.setHeader\\s*\\(\\s*['\"]X-XSS-Protection['\"]",
        "severity": "high",
        "recommendation": "Implement the X-XSS-Protection header to enable XSS filtering."
      },
      {
        "id": "JS120",
        "description": "Detect insecure usage of document.cookie without secure flag",
        "pattern": "document\\.cookie\\s*=",
        "severity": "high",
        "recommendation": "Set the secure flag on cookies to ensure they are only sent over HTTPS."
      },
      {
        "id": "JS121",
        "description": "Detect usage of untrusted input in location.pathname",
        "pattern": "location\\.pathname\\s*=",
        "severity": "medium",
        "recommendation": "Validate and sanitize pathnames before assigning them to location.pathname to prevent injection attacks."
      },
      {
        "id": "JS122",
        "description": "Detect lack of HSTS header in HTTP responses",
        "pattern": "Strict-Transport-Security",
        "severity": "high",
        "recommendation": "Implement the HTTP Strict Transport Security (HSTS) header to enforce HTTPS connections."
      },
      {
        "id": "JS123",
        "description": "Detect insecure usage of navigator.geolocation.getCurrentPosition()",
        "pattern": "navigator\\.geolocation\\.getCurrentPosition\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure proper permission handling and user consent before using geolocation data."
      },
      {
        "id": "JS124",
        "description": "Detect insecure usage of navigator.geolocation.watchPosition()",
        "pattern": "navigator\\.geolocation\\.watchPosition\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure proper permission handling and user consent before using geolocation data."
      },
      {
        "id": "JS125",
        "description": "Detect usage of untrusted input in URL hash",
        "pattern": "URL\\.hash\\s*=",
        "severity": "medium",
        "recommendation": "Sanitize and validate hash values before using them to prevent injection attacks."
      },
      {
        "id": "JS126",
        "description": "Detect insecure usage of WebSocket without validation",
        "pattern": "\\bnew\\s+WebSocket\\s*\\(",
        "severity": "high",
        "recommendation": "Use secure WebSocket connections (wss://) and validate all input and output data."
      },
      {
        "id": "JS127",
        "description": "Detect lack of CSRF token in forms",
        "pattern": "<form\\s+[^>]*>",
        "severity": "high",
        "recommendation": "Include a CSRF token in forms to prevent cross-site request forgery attacks."
      },
      {
        "id": "JS128",
        "description": "Detect lack of input validation in URL parameters",
        "pattern": "location\\.search",
        "severity": "high",
        "recommendation": "Validate and sanitize URL parameters to prevent injection attacks."
      },
      {
        "id": "JS129",
        "description": "Detect lack of validation for dynamically generated image URLs",
        "pattern": "document\\.createElement\\s*\\(['\"]img['\"]\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamic image URLs to prevent XSS attacks."
      },
      {
        "id": "JS130",
        "description": "Detect lack of validation for dynamically generated video URLs",
        "pattern": "document\\.createElement\\s*\\(['\"]video['\"]\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamic video URLs to prevent XSS attacks."
      },
      {
        "id": "JS131",
        "description": "Detect lack of validation for dynamically generated audio URLs",
        "pattern": "document\\.createElement\\s*\\(['\"]audio['\"]\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamic audio URLs to prevent XSS attacks."
      },
      {
        "id": "JS132",
        "description": "Detect lack of validation for dynamically generated anchor URLs",
        "pattern": "document\\.createElement\\s*\\(['\"]a['\"]\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamic anchor URLs to prevent XSS attacks."
      },
      {
        "id": "JS133",
        "description": "Detect lack of validation for dynamically generated link URLs",
        "pattern": "document\\.createElement\\s*\\(['\"]link['\"]\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamic link URLs to prevent XSS attacks."
      },
      {
        "id": "JS134",
        "description": "Detect lack of validation for dynamically generated source URLs",
        "pattern": "document\\.createElement\\s*\\(['\"]source['\"]\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamic source URLs to prevent XSS attacks."
      },
      {
        "id": "JS135",
        "description": "Detect usage of untrusted input in URL pathname",
        "pattern": "URL\\.pathname\\s*=",
        "severity": "medium",
        "recommendation": "Sanitize and validate pathname values before using them to prevent injection attacks."
      },
      {
        "id": "JS136",
        "description": "Detect insecure use of XMLHttpRequest with unsanitized URL",
        "pattern": "XMLHttpRequest\\(\\)\\.open\\s*\\(\\s*['\"]GET['\"]",
        "severity": "medium",
        "recommendation": "Ensure all URLs used in XMLHttpRequest are sanitized to prevent injection attacks."
      },
      {
        "id": "JS137",
        "description": "Detect usage of untrusted input in URL search",
        "pattern": "URL\\.search\\s*=",
        "severity": "medium",
        "recommendation": "Sanitize and validate search values before using them to prevent injection attacks."
      },
      {
        "id": "JS138",
        "description": "Detect insecure usage of document.cookie without HttpOnly flag",
        "pattern": "document\\.cookie\\s*=",
        "severity": "high",
        "recommendation": "Set the HttpOnly flag on cookies to prevent access from JavaScript and mitigate XSS attacks."
      },
      {
        "id": "JS139",
        "description": "Detect usage of untrusted input in innerHTML with template literals",
        "pattern": "\\.innerHTML\\s*=\\s*`.*\\$\\{",
        "severity": "high",
        "recommendation": "Avoid using innerHTML with template literals containing untrusted input. Use safer methods like textContent."
      },
      {
        "id": "JS140",
        "description": "Detect usage of untrusted input in outerHTML with template literals",
        "pattern": "\\.outerHTML\\s*=\\s*`.*\\$\\{",
        "severity": "high",
        "recommendation": "Avoid using outerHTML with template literals containing untrusted input. Use safer methods like textContent."
      },
      {
        "id": "JS141",
        "description": "Detect insecure usage of XMLHttpRequest with unsanitized POST data",
        "pattern": "XMLHttpRequest\\(\\)\\.send\\s*\\(",
        "severity": "medium",
        "recommendation": "Sanitize and validate all POST data before sending it via XMLHttpRequest to prevent injection attacks."
      },
      {
        "id": "JS142",
        "description": "Detect usage of untrusted input in URL hash with template literals",
        "pattern": "URL\\.hash\\s*=\\s*`.*\\$\\{",
        "severity": "medium",
        "recommendation": "Sanitize and validate hash values before using them with template literals to prevent injection attacks."
      },
      {
        "id": "JS143",
        "description": "Detect insecure usage of WebSocket without proper validation",
        "pattern": "new\\s+WebSocket\\s*\\(",
        "severity": "high",
        "recommendation": "Use secure WebSocket connections (wss://) and validate all input and output data."
      },
      {
        "id": "JS144",
        "description": "Detect lack of input validation in dynamically generated form actions",
        "pattern": "<form\\s+[^>]*action",
        "severity": "high",
        "recommendation": "Validate and sanitize form action URLs to prevent injection attacks."
      },
      {
        "id": "JS145",
        "description": "Detect usage of untrusted input in document.domain",
        "pattern": "document\\.domain\\s*=",
        "severity": "medium",
        "recommendation": "Avoid using document.domain to relax same-origin policy. Use secure cross-origin communication techniques."
      },
      {
        "id": "JS146",
        "description": "Detect usage of untrusted input in window.open",
        "pattern": "window\\.open\\s*\\(",
        "severity": "medium",
        "recommendation": "Validate and sanitize URLs before passing them to window.open to prevent open redirect vulnerabilities."
      },
      {
        "id": "JS147",
        "description": "Detect insecure usage of fetch without proper validation",
        "pattern": "fetch\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure all URLs used in fetch are sanitized and validate responses to prevent injection attacks."
      },
      {
        "id": "JS148",
        "description": "Detect insecure usage of fetch with unsanitized request body",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body",
        "severity": "medium",
        "recommendation": "Sanitize and validate all request body data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS149",
        "description": "Detect insecure usage of fetch with unsanitized query parameters",
        "pattern": "fetch\\s*\\([^?]*\\?",
        "severity": "medium",
        "recommendation": "Sanitize and validate query parameters before using them with fetch to prevent injection attacks."
      },
      {
        "id": "JS150",
        "description": "Detect lack of validation for dynamically generated script URLs",
        "pattern": "document\\.createElement\\s*\\(['\"]script['\"]\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamic script URLs to prevent XSS attacks."
      },
      {
        "id": "JS151",
        "description": "Detect lack of validation for dynamically generated iframe URLs",
        "pattern": "document\\.createElement\\s*\\(['\"]iframe['\"]\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamic iframe URLs to prevent XSS and clickjacking attacks."
      },
      {
        "id": "JS152",
        "description": "Detect insecure usage of fetch with unsanitized headers",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*headers",
        "severity": "medium",
        "recommendation": "Sanitize and validate all header data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS153",
        "description": "Detect lack of validation for dynamically generated object URLs",
        "pattern": "URL\\.createObjectURL\\s*\\(",
        "severity": "medium",
        "recommendation": "Validate data before creating object URLs to prevent potential misuse."
      },
      {
        "id": "JS154",
        "description": "Detect insecure usage of fetch without proper CORS configuration",
        "pattern": "fetch\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure fetch requests include proper CORS configuration to prevent unauthorized cross-origin requests."
      },
      {
        "id": "JS155",
        "description": "Detect insecure usage of fetch without credentials",
        "pattern": "fetch\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure fetch requests include credentials if needed and validate responses."
      },
      {
        "id": "JS156",
        "description": "Detect insecure usage of fetch with GET method",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*method\\s*:\\s*['\"]GET['\"]",
        "severity": "medium",
        "recommendation": "Ensure fetch requests with GET method do not include sensitive data in the URL."
      },
      {
        "id": "JS157",
        "description": "Detect insecure usage of fetch with POST method",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*method\\s*:\\s*['\"]POST['\"]",
        "severity": "medium",
        "recommendation": "Ensure fetch requests with POST method validate and sanitize all data before sending it."
      },
      {
        "id": "JS158",
        "description": "Detect insecure usage of fetch with PUT method",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*method\\s*:\\s*['\"]PUT['\"]",
        "severity": "medium",
        "recommendation": "Ensure fetch requests with PUT method validate and sanitize all data before sending it."
      },
      {
        "id": "JS159",
        "description": "Detect insecure usage of fetch with DELETE method",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*method\\s*:\\s*['\"]DELETE['\"]",
        "severity": "medium",
        "recommendation": "Ensure fetch requests with DELETE method validate and sanitize all data before sending it."
      },
      {
        "id": "JS160",
        "description": "Detect insecure usage of fetch with unsanitized query parameters",
        "pattern": "fetch\\s*\\([^?]*\\?",
        "severity": "medium",
        "recommendation": "Sanitize and validate query parameters before using them with fetch to prevent injection attacks."
      },
      {
        "id": "JS161",
        "description": "Detect insecure usage of fetch with unsanitized URL parameters",
        "pattern": "fetch\\s*\\([^\\[]*\\[",
        "severity": "medium",
        "recommendation": "Sanitize and validate URL parameters before using them with fetch to prevent injection attacks."
      },
      {
        "id": "JS162",
        "description": "Detect lack of validation for dynamically generated URLs",
        "pattern": "URL\\s*\\(",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamically generated URLs to prevent XSS and open redirect vulnerabilities."
      },
      {
        "id": "JS163",
        "description": "Detect insecure usage of fetch without CSRF token",
        "pattern": "fetch\\s*\\(",
        "severity": "high",
        "recommendation": "Include a CSRF token in fetch requests to prevent cross-site request forgery attacks."
      },
      {
        "id": "JS164",
        "description": "Detect insecure usage of XMLHttpRequest without CSRF token",
        "pattern": "XMLHttpRequest\\(\\)\\.send\\s*\\(",
        "severity": "high",
        "recommendation": "Include a CSRF token in XMLHttpRequest requests to prevent cross-site request forgery attacks."
      },
      {
        "id": "JS165",
        "description": "Detect insecure usage of fetch without proper headers",
        "pattern": "fetch\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure fetch requests include proper headers to prevent unauthorized access."
      },
      {
        "id": "JS166",
        "description": "Detect insecure usage of fetch with unsanitized data",
        "pattern": "fetch\\s*\\(",
        "severity": "medium",
        "recommendation": "Sanitize and validate all data sent via fetch to prevent injection attacks."
      },
      {
        "id": "JS167",
        "description": "Detect lack of input validation in dynamically generated URLs",
        "pattern": "URL\\s*\\(",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamically generated URLs to prevent XSS and open redirect vulnerabilities."
      },
      {
        "id": "JS168",
        "description": "Detect insecure usage of fetch without proper authentication",
        "pattern": "fetch\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure fetch requests include proper authentication to prevent unauthorized access."
      },
      {
        "id": "JS169",
        "description": "Detect insecure usage of fetch without proper CORS policy",
        "pattern": "fetch\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure fetch requests include a proper CORS policy to prevent unauthorized cross-origin requests."
      },
      {
        "id": "JS170",
        "description": "Detect insecure usage of fetch with unsanitized JSON data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*JSON",
        "severity": "medium",
        "recommendation": "Sanitize and validate all JSON data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS171",
        "description": "Detect insecure usage of fetch with unsanitized form data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+FormData",
        "severity": "medium",
        "recommendation": "Sanitize and validate all form data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS172",
        "description": "Detect insecure usage of fetch with unsanitized multipart data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+Blob",
        "severity": "medium",
        "recommendation": "Sanitize and validate all multipart data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS173",
        "description": "Detect insecure usage of fetch with unsanitized URLSearchParams",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+URLSearchParams",
        "severity": "medium",
        "recommendation": "Sanitize and validate all URLSearchParams before sending them via fetch to prevent injection attacks."
      },
      {
        "id": "JS174",
        "description": "Detect insecure usage of fetch without proper response handling",
        "pattern": "fetch\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure fetch responses are properly handled and validated to prevent injection attacks."
      },
      {
        "id": "JS175",
        "description": "Detect lack of integrity attribute in external link tags",
        "pattern": "<link\\s+rel=['\"]stylesheet['\"]",
        "severity": "medium",
        "recommendation": "Use the integrity attribute in external link tags to ensure content has not been tampered with."
      },
      {
        "id": "JS176",
        "description": "Detect insecure usage of fetch with unsanitized URL parameters",
        "pattern": "fetch\\s*\\([^\\[]*\\[",
        "severity": "medium",
        "recommendation": "Sanitize and validate URL parameters before using them with fetch to prevent injection attacks."
      },
      {
        "id": "JS177",
        "description": "Detect lack of validation for dynamically generated object URLs",
        "pattern": "URL\\.createObjectURL\\s*\\(",
        "severity": "medium",
        "recommendation": "Validate data before creating object URLs to prevent potential misuse."
      },
      {
        "id": "JS178",
        "description": "Detect insecure usage of fetch without proper headers",
        "pattern": "fetch\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure fetch requests include proper headers to prevent unauthorized access."
      },
      {
        "id": "JS179",
        "description": "Detect insecure usage of fetch with unsanitized data",
        "pattern": "fetch\\s*\\(",
        "severity": "medium",
        "recommendation": "Sanitize and validate all data sent via fetch to prevent injection attacks."
      },
      {
        "id": "JS180",
        "description": "Detect insecure usage of fetch with unsanitized query parameters",
        "pattern": "fetch\\s*\\([^?]*\\?",
        "severity": "medium",
        "recommendation": "Sanitize and validate query parameters before using them with fetch to prevent injection attacks."
      },
      {
        "id": "JS181",
        "description": "Detect insecure usage of fetch without proper authentication",
        "pattern": "fetch\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure fetch requests include proper authentication to prevent unauthorized access."
      },
      {
        "id": "JS182",
        "description": "Detect insecure usage of fetch without proper CORS policy",
        "pattern": "fetch\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure fetch requests include a proper CORS policy to prevent unauthorized cross-origin requests."
      },
      {
        "id": "JS183",
        "description": "Detect insecure usage of fetch with unsanitized JSON data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*JSON",
        "severity": "medium",
        "recommendation": "Sanitize and validate all JSON data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS184",
        "description": "Detect insecure usage of fetch with unsanitized form data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+FormData",
        "severity": "medium",
        "recommendation": "Sanitize and validate all form data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS185",
        "description": "Detect insecure usage of fetch with unsanitized multipart data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+Blob",
        "severity": "medium",
        "recommendation": "Sanitize and validate all multipart data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS186",
        "description": "Detect insecure usage of fetch with unsanitized URLSearchParams",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+URLSearchParams",
        "severity": "medium",
        "recommendation": "Sanitize and validate all URLSearchParams before sending them via fetch to prevent injection attacks."
      },
      {
        "id": "JS187",
        "description": "Detect insecure usage of fetch without proper response handling",
        "pattern": "fetch\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure fetch responses are properly handled and validated to prevent injection attacks."
      },
      {
        "id": "JS188",
        "description": "Detect insecure usage of fetch without proper validation",
        "pattern": "fetch\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure all URLs used in fetch are sanitized and validate responses to prevent injection attacks."
      },
      {
        "id": "JS189",
        "description": "Detect insecure usage of fetch with unsanitized headers",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*headers",
        "severity": "medium",
        "recommendation": "Sanitize and validate all header data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS190",
        "description": "Detect insecure usage of fetch with unsanitized query parameters",
        "pattern": "fetch\\s*\\([^?]*\\?",
        "severity": "medium",
        "recommendation": "Sanitize and validate query parameters before using them with fetch to prevent injection attacks."
      },
      {
        "id": "JS191",
        "description": "Detect insecure usage of fetch without proper authentication",
        "pattern": "fetch\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure fetch requests include proper authentication to prevent unauthorized access."
      },
      {
        "id": "JS192",
        "description": "Detect insecure usage of fetch without proper CORS policy",
        "pattern": "fetch\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure fetch requests include a proper CORS policy to prevent unauthorized cross-origin requests."
      },
      {
        "id": "JS193",
        "description": "Detect insecure usage of fetch with unsanitized JSON data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*JSON",
        "severity": "medium",
        "recommendation": "Sanitize and validate all JSON data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS194",
        "description": "Detect insecure usage of fetch with unsanitized form data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+FormData",
        "severity": "medium",
        "recommendation": "Sanitize and validate all form data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS195",
        "description": "Detect insecure usage of fetch with unsanitized multipart data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+Blob",
        "severity": "medium",
        "recommendation": "Sanitize and validate all multipart data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS196",
        "description": "Detect insecure usage of fetch with unsanitized URLSearchParams",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+URLSearchParams",
        "severity": "medium",
        "recommendation": "Sanitize and validate all URLSearchParams before sending them via fetch to prevent injection attacks."
      },
      {
        "id": "JS197",
        "description": "Detect insecure usage of fetch without proper response handling",
        "pattern": "fetch\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure fetch responses are properly handled and validated to prevent injection attacks."
      },
      {
        "id": "JS198",
        "description": "Detect lack of validation for dynamically generated script URLs",
        "pattern": "document\\.createElement\\s*\\(['\"]script['\"]\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamic script URLs to prevent XSS attacks."
      },
      {
        "id": "JS199",
        "description": "Detect lack of validation for dynamically generated iframe URLs",
        "pattern": "document\\.createElement\\s*\\(['\"]iframe['\"]\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamic iframe URLs to prevent XSS and clickjacking attacks."
      },
      {
        "id": "JS200",
        "description": "Detect insecure usage of fetch with unsanitized headers",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*headers",
        "severity": "medium",
        "recommendation": "Sanitize and validate all header data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS201",
        "description": "Detect lack of validation for dynamically generated URLs",
        "pattern": "URL\\s*\\(",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamically generated URLs to prevent XSS and open redirect vulnerabilities."
      },
      {
        "id": "JS202",
        "description": "Detect insecure usage of fetch with unsanitized data",
        "pattern": "fetch\\s*\\(",
        "severity": "medium",
        "recommendation": "Sanitize and validate all data sent via fetch to prevent injection attacks."
      },
      {
        "id": "JS203",
        "description": "Detect insecure usage of fetch with unsanitized query parameters",
        "pattern": "fetch\\s*\\([^?]*\\?",
        "severity": "medium",
        "recommendation": "Sanitize and validate query parameters before using them with fetch to prevent injection attacks."
      },
      {
        "id": "JS204",
        "description": "Detect insecure usage of fetch without proper authentication",
        "pattern": "fetch\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure fetch requests include proper authentication to prevent unauthorized access."
      },
      {
        "id": "JS205",
        "description": "Detect insecure usage of fetch without proper CORS policy",
        "pattern": "fetch\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure fetch requests include a proper CORS policy to prevent unauthorized cross-origin requests."
      },
      {
        "id": "JS206",
        "description": "Detect insecure usage of fetch with unsanitized JSON data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*JSON",
        "severity": "medium",
        "recommendation": "Sanitize and validate all JSON data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS207",
        "description": "Detect insecure usage of fetch with unsanitized form data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+FormData",
        "severity": "medium",
        "recommendation": "Sanitize and validate all form data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS208",
        "description": "Detect insecure usage of fetch with unsanitized multipart data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+Blob",
        "severity": "medium",
        "recommendation": "Sanitize and validate all multipart data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS209",
        "description": "Detect insecure usage of fetch with unsanitized URLSearchParams",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+URLSearchParams",
        "severity": "medium",
        "recommendation": "Sanitize and validate all URLSearchParams before sending them via fetch to prevent injection attacks."
      },
      {
        "id": "JS210",
        "description": "Detect insecure usage of fetch without proper response handling",
        "pattern": "fetch\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure fetch responses are properly handled and validated to prevent injection attacks."
      },
      {
        "id": "JS211",
        "description": "Detect lack of validation for dynamically generated script URLs",
        "pattern": "document\\.createElement\\s*\\(['\"]script['\"]\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamic script URLs to prevent XSS attacks."
      },
      {
        "id": "JS212",
        "description": "Detect lack of validation for dynamically generated iframe URLs",
        "pattern": "document\\.createElement\\s*\\(['\"]iframe['\"]\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamic iframe URLs to prevent XSS and clickjacking attacks."
      },
      {
        "id": "JS213",
        "description": "Detect insecure usage of fetch with unsanitized headers",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*headers",
        "severity": "medium",
        "recommendation": "Sanitize and validate all header data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS214",
        "description": "Detect lack of validation for dynamically generated URLs",
        "pattern": "URL\\s*\\(",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamically generated URLs to prevent XSS and open redirect vulnerabilities."
      },
      {
        "id": "JS215",
        "description": "Detect insecure usage of fetch with unsanitized data",
        "pattern": "fetch\\s*\\(",
        "severity": "medium",
        "recommendation": "Sanitize and validate all data sent via fetch to prevent injection attacks."
      },
      {
        "id": "JS216",
        "description": "Detect insecure usage of fetch with unsanitized query parameters",
        "pattern": "fetch\\s*\\([^?]*\\?",
        "severity": "medium",
        "recommendation": "Sanitize and validate query parameters before using them with fetch to prevent injection attacks."
      },
      {
        "id": "JS217",
        "description": "Detect insecure usage of fetch without proper authentication",
        "pattern": "fetch\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure fetch requests include proper authentication to prevent unauthorized access."
      },
      {
        "id": "JS218",
        "description": "Detect insecure usage of fetch without proper CORS policy",
        "pattern": "fetch\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure fetch requests include a proper CORS policy to prevent unauthorized cross-origin requests."
      },
      {
        "id": "JS219",
        "description": "Detect insecure usage of fetch with unsanitized JSON data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*JSON",
        "severity": "medium",
        "recommendation": "Sanitize and validate all JSON data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS220",
        "description": "Detect insecure usage of fetch with unsanitized form data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+FormData",
        "severity": "medium",
        "recommendation": "Sanitize and validate all form data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS221",
        "description": "Detect insecure usage of fetch with unsanitized multipart data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+Blob",
        "severity": "medium",
        "recommendation": "Sanitize and validate all multipart data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS222",
        "description": "Detect insecure usage of fetch with unsanitized URLSearchParams",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+URLSearchParams",
        "severity": "medium",
        "recommendation": "Sanitize and validate all URLSearchParams before sending them via fetch to prevent injection attacks."
      },
      {
        "id": "JS223",
        "description": "Detect insecure usage of fetch without proper response handling",
        "pattern": "fetch\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure fetch responses are properly handled and validated to prevent injection attacks."
      },
      {
        "id": "JS224",
        "description": "Detect lack of validation for dynamically generated script URLs",
        "pattern": "document\\.createElement\\s*\\(['\"]script['\"]\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamic script URLs to prevent XSS attacks."
      },
      {
        "id": "JS225",
        "description": "Detect lack of validation for dynamically generated iframe URLs",
        "pattern": "document\\.createElement\\s*\\(['\"]iframe['\"]\\)",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamic iframe URLs to prevent XSS and clickjacking attacks."
      },
      {
        "id": "JS226",
        "description": "Detect insecure usage of fetch with unsanitized headers",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*headers",
        "severity": "medium",
        "recommendation": "Sanitize and validate all header data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS227",
        "description": "Detect lack of validation for dynamically generated URLs",
        "pattern": "URL\\s*\\(",
        "severity": "high",
        "recommendation": "Validate and sanitize all dynamically generated URLs to prevent XSS and open redirect vulnerabilities."
      },
      {
        "id": "JS228",
        "description": "Detect insecure usage of fetch with unsanitized data",
        "pattern": "fetch\\s*\\(",
        "severity": "medium",
        "recommendation": "Sanitize and validate all data sent via fetch to prevent injection attacks."
      },
      {
        "id": "JS229",
        "description": "Detect insecure usage of fetch with unsanitized query parameters",
        "pattern": "fetch\\s*\\([^?]*\\?",
        "severity": "medium",
        "recommendation": "Sanitize and validate query parameters before using them with fetch to prevent injection attacks."
      },
      {
        "id": "JS230",
        "description": "Detect insecure usage of fetch without proper authentication",
        "pattern": "fetch\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure fetch requests include proper authentication to prevent unauthorized access."
      },
      {
        "id": "JS231",
        "description": "Detect insecure usage of fetch without proper CORS policy",
        "pattern": "fetch\\s*\\(",
        "severity": "high",
        "recommendation": "Ensure fetch requests include a proper CORS policy to prevent unauthorized cross-origin requests."
      },
      {
        "id": "JS232",
        "description": "Detect insecure usage of fetch with unsanitized JSON data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*JSON",
        "severity": "medium",
        "recommendation": "Sanitize and validate all JSON data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS233",
        "description": "Detect insecure usage of fetch with unsanitized form data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+FormData",
        "severity": "medium",
        "recommendation": "Sanitize and validate all form data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS234",
        "description": "Detect insecure usage of fetch with unsanitized multipart data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+Blob",
        "severity": "medium",
        "recommendation": "Sanitize and validate all multipart data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS235",
        "description": "Detect usage of `document.write` within loops",
        "pattern": "for\\s*\\(.*\\)\\s*{.*document\\.write",
        "severity": "medium",
        "recommendation": "Avoid using document.write within loops as it can lead to performance issues and potential vulnerabilities."
      },
      {
        "id": "JS236",
        "description": "Detect insecure use of `Element.insertAdjacentHTML`",
        "pattern": "\\.insertAdjacentHTML\\s*\\(",
        "severity": "high",
        "recommendation": "Avoid using insertAdjacentHTML with untrusted input. Use textContent or safer methods."
      },
      {
        "id": "JS237",
        "description": "Detect assignment to `location.href` with user-controlled input",
        "pattern": "location\\.href\\s*=\\s*userInput",
        "severity": "high",
        "recommendation": "Sanitize and validate user input before assigning it to location.href to prevent open redirect vulnerabilities."
      },
      {
        "id": "JS238",
        "description": "Detect usage of `localStorage` for storing sensitive data",
        "pattern": "localStorage\\.setItem\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid storing sensitive data in localStorage. Use secure storage solutions."
      },
      {
        "id": "JS239",
        "description": "Detect usage of `sessionStorage` for storing sensitive data",
        "pattern": "sessionStorage\\.setItem\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid storing sensitive data in sessionStorage. Use secure storage solutions."
      },
      {
        "id": "JS240",
        "description": "Detect insecure use of `document.cookie` without Secure flag",
        "pattern": "document\\.cookie\\s*=\\s*['\"][^;]*['\"]",
        "severity": "high",
        "recommendation": "Set the Secure flag on cookies to ensure they are only sent over HTTPS."
      },
      {
        "id": "JS241",
        "description": "Detect assignment to `location.replace` with user-controlled input",
        "pattern": "location\\.replace\\s*\\(",
        "severity": "high",
        "recommendation": "Sanitize and validate user input before using it with location.replace to prevent open redirect vulnerabilities."
      },
      {
        "id": "JS242",
        "description": "Detect usage of `window.confirm`",
        "pattern": "window\\.confirm\\s*\\(",
        "severity": "low",
        "recommendation": "Avoid using window.confirm for critical actions. Use custom dialog boxes with proper validation."
      },
      {
        "id": "JS243",
        "description": "Detect usage of `window.prompt`",
        "pattern": "window\\.prompt\\s*\\(",
        "severity": "low",
        "recommendation": "Avoid using window.prompt for sensitive input. Use custom input forms with proper validation."
      },
      {
        "id": "JS244",
        "description": "Detect assignment to `document.domain`",
        "pattern": "document\\.domain\\s*=",
        "severity": "medium",
        "recommendation": "Avoid using document.domain to relax same-origin policy. Use secure cross-origin communication techniques."
      },
      {
        "id": "JS245",
        "description": "Detect usage of `eval` within `setTimeout`",
        "pattern": "setTimeout\\s*\\(\\s*['\"]eval",
        "severity": "high",
        "recommendation": "Avoid using eval within setTimeout. Use function expressions or declarations instead."
      },
      {
        "id": "JS246",
        "description": "Detect usage of `eval` within `setInterval`",
        "pattern": "setInterval\\s*\\(\\s*['\"]eval",
        "severity": "high",
        "recommendation": "Avoid using eval within setInterval. Use function expressions or declarations instead."
      },
      {
        "id": "JS247",
        "description": "Detect insecure usage of `window.open` with user-controlled URLs",
        "pattern": "window\\.open\\s*\\(userInput",
        "severity": "medium",
        "recommendation": "Sanitize and validate URLs before passing them to window.open to prevent open redirect vulnerabilities."
      },
      {
        "id": "JS248",
        "description": "Detect insecure usage of `document.write` within event handlers",
        "pattern": "on\\w+\\s*=\\s*\"[^\"]*document\\.write",
        "severity": "high",
        "recommendation": "Avoid using document.write within event handlers. Use DOM manipulation methods instead."
      },
      {
        "id": "JS249",
        "description": "Detect usage of `unescape`",
        "pattern": "unescape\\s*\\(",
        "severity": "low",
        "recommendation": "Avoid using unescape as it is deprecated. Use decodeURI or decodeURIComponent instead."
      },
      {
        "id": "JS250",
        "description": "Detect usage of `escape`",
        "pattern": "escape\\s*\\(",
        "severity": "low",
        "recommendation": "Avoid using escape as it is deprecated. Use encodeURI or encodeURIComponent instead."
      },
      {
        "id": "JS251",
        "description": "Detect usage of `document.write` with untrusted input",
        "pattern": "document\\.write\\s*\\(userInput",
        "severity": "high",
        "recommendation": "Avoid using document.write with untrusted input. Use safer DOM manipulation methods."
      },
      {
        "id": "JS252",
        "description": "Detect assignment to `document.body.innerHTML`",
        "pattern": "document\\.body\\.innerHTML\\s*=",
        "severity": "high",
        "recommendation": "Avoid assigning untrusted input to innerHTML. Use textContent or DOM manipulation methods."
      },
      {
        "id": "JS253",
        "description": "Detect usage of `innerHTML` with template literals",
        "pattern": "\\.innerHTML\\s*=\\s*`.*\\$\\{",
        "severity": "high",
        "recommendation": "Avoid using innerHTML with template literals containing untrusted input. Use safer methods like textContent."
      },
      {
        "id": "JS254",
        "description": "Detect insecure use of `Function` constructor",
        "pattern": "new\\s+Function\\s*\\(",
        "severity": "high",
        "recommendation": "Avoid using the Function constructor as it can lead to code injection vulnerabilities. Use safer alternatives."
      },
      {
        "id": "JS255",
        "description": "Detect usage of `innerText` instead of `textContent`",
        "pattern": "\\.innerText\\s*=",
        "severity": "low",
        "recommendation": "Use textContent instead of innerText for better security and performance."
      },
      {
        "id": "JS256",
        "description": "Detect lack of CSP header",
        "pattern": "Content-Security-Policy",
        "severity": "high",
        "recommendation": "Implement a strong Content Security Policy (CSP) to mitigate XSS and other injection attacks."
      },
      {
        "id": "JS257",
        "description": "Detect usage of `with` statement",
        "pattern": "\\bwith\\b",
        "severity": "low",
        "recommendation": "Avoid using the 'with' statement as it can lead to unpredictable behavior and make code harder to debug."
      },
      {
        "id": "JS258",
        "description": "Detect lack of validation for URL parameters",
        "pattern": "location\\.search",
        "severity": "high",
        "recommendation": "Validate and sanitize URL parameters to prevent injection attacks."
      },
      {
        "id": "JS259",
        "description": "Detect usage of `window.postMessage` without target origin",
        "pattern": "window\\.postMessage\\s*\\(.*,'\\s*\\*",
        "severity": "high",
        "recommendation": "Specify a target origin when using window.postMessage to ensure messages are sent to trusted origins only."
      },
      {
        "id": "JS260",
        "description": "Detect lack of HTTPS for AJAX requests",
        "pattern": "\\$.ajax\\s*\\(.*url\\s*:\\s*['\"]http:",
        "severity": "high",
        "recommendation": "Use HTTPS for AJAX requests to ensure secure data transmission."
      },
      {
        "id": "JS261",
        "description": "Detect usage of deprecated `alert`",
        "pattern": "alert\\s*\\(",
        "severity": "low",
        "recommendation": "Avoid using alert for displaying messages. Use custom dialog boxes for better control and user experience."
      },
      {
        "id": "JS262",
        "description": "Detect insecure use of `WebSocket` without validation",
        "pattern": "new\\s+WebSocket\\s*\\(",
        "severity": "high",
        "recommendation": "Use secure WebSocket connections (wss://) and validate all input and output data."
      },
      {
        "id": "JS263",
        "description": "Detect insecure usage of `innerHTML` for setting SVG content",
        "pattern": "<svg[^>]*>(.*?)<\\/svg>",
        "severity": "high",
        "recommendation": "Avoid using innerHTML for setting SVG content. Use DOM manipulation methods to create and append SVG elements."
      },
      {
        "id": "JS264",
        "description": "Detect usage of `crypto.randomBytes` without error handling",
        "pattern": "crypto\\.randomBytes\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure proper error handling when using crypto.randomBytes to generate secure random bytes."
      },
      {
        "id": "JS265",
        "description": "Detect usage of `setImmediate` with untrusted input",
        "pattern": "setImmediate\\s*\\(userInput",
        "severity": "medium",
        "recommendation": "Avoid using setImmediate with untrusted input. Use function expressions or declarations instead."
      },
      {
        "id": "JS266",
        "description": "Detect insecure usage of `crypto.subtle.digest`",
        "pattern": "crypto\\.subtle\\.digest\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure data passed to crypto.subtle.digest is sanitized to prevent security vulnerabilities."
      },
      {
        "id": "JS267",
        "description": "Detect insecure usage of `crypto.subtle.generateKey`",
        "pattern": "crypto\\.subtle\\.generateKey\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure proper handling of generated keys when using crypto.subtle.generateKey."
      },
      {
        "id": "JS268",
        "description": "Detect insecure usage of `crypto.subtle.importKey`",
        "pattern": "crypto\\.subtle\\.importKey\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure proper handling of imported keys when using crypto.subtle.importKey."
      },
      {
        "id": "JS269",
        "description": "Detect insecure usage of `crypto.subtle.exportKey`",
        "pattern": "crypto\\.subtle\\.exportKey\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure proper handling of exported keys when using crypto.subtle.exportKey."
      },
      {
        "id": "JS270",
        "description": "Detect insecure usage of `crypto.subtle.encrypt`",
        "pattern": "crypto\\.subtle\\.encrypt\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure data passed to crypto.subtle.encrypt is sanitized to prevent security vulnerabilities."
      },
      {
        "id": "JS271",
        "description": "Detect insecure usage of `crypto.subtle.decrypt`",
        "pattern": "crypto\\.subtle\\.decrypt\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure data passed to crypto.subtle.decrypt is sanitized to prevent security vulnerabilities."
      },
      {
        "id": "JS272",
        "description": "Detect insecure usage of `crypto.subtle.sign`",
        "pattern": "crypto\\.subtle\\.sign\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure data passed to crypto.subtle.sign is sanitized to prevent security vulnerabilities."
      },
      {
        "id": "JS273",
        "description": "Detect insecure usage of `crypto.subtle.verify`",
        "pattern": "crypto\\.subtle\\.verify\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure data passed to crypto.subtle.verify is sanitized to prevent security vulnerabilities."
      },
      {
        "id": "JS274",
        "description": "Detect usage of `atob` with untrusted input",
        "pattern": "atob\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid using atob with untrusted input. Use safer alternatives or validate input before decoding."
      },
      {
        "id": "JS275",
        "description": "Detect usage of `btoa` with untrusted input",
        "pattern": "btoa\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid using btoa with untrusted input. Use safer alternatives or validate input before encoding."
      },
      {
        "id": "JS276",
        "description": "Detect insecure usage of `crypto.subtle.deriveKey`",
        "pattern": "crypto\\.subtle\\.deriveKey\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure proper handling of derived keys when using crypto.subtle.deriveKey."
      },
      {
        "id": "JS277",
        "description": "Detect insecure usage of `crypto.subtle.deriveBits`",
        "pattern": "crypto\\.subtle\\.deriveBits\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure proper handling of derived bits when using crypto.subtle.deriveBits."
      },
      {
        "id": "JS278",
        "description": "Detect insecure usage of `crypto.subtle.wrapKey`",
        "pattern": "crypto\\.subtle\\.wrapKey\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure proper handling of wrapped keys when using crypto.subtle.wrapKey."
      },
      {
        "id": "JS279",
        "description": "Detect insecure usage of `crypto.subtle.unwrapKey`",
        "pattern": "crypto\\.subtle\\.unwrapKey\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure proper handling of unwrapped keys when using crypto.subtle.unwrapKey."
      },
      {
        "id": "JS280",
        "description": "Detect insecure usage of `localStorage.getItem`",
        "pattern": "localStorage\\.getItem\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid using localStorage for sensitive data. Use secure storage mechanisms."
      },
      {
        "id": "JS281",
        "description": "Detect insecure usage of `sessionStorage.getItem`",
        "pattern": "sessionStorage\\.getItem\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid using sessionStorage for sensitive data. Use secure storage mechanisms."
      },
      {
        "id": "JS282",
        "description": "Detect insecure usage of `localStorage.removeItem`",
        "pattern": "localStorage\\.removeItem\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid using localStorage for sensitive data. Use secure storage mechanisms."
      },
      {
        "id": "JS283",
        "description": "Detect insecure usage of `sessionStorage.removeItem`",
        "pattern": "sessionStorage\\.removeItem\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid using sessionStorage for sensitive data. Use secure storage mechanisms."
      },
      {
        "id": "JS284",
        "description": "Detect insecure usage of `localStorage.clear`",
        "pattern": "localStorage\\.clear\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid using localStorage for sensitive data. Use secure storage mechanisms."
      },
      {
        "id": "JS285",
        "description": "Detect insecure usage of `sessionStorage.clear`",
        "pattern": "sessionStorage\\.clear\\s*\\(",
        "severity": "medium",
        "recommendation": "Avoid using sessionStorage for sensitive data. Use secure storage mechanisms."
      },
      {
        "id": "JS286",
        "description": "Detect insecure usage of `fetch` without credentials",
        "pattern": "fetch\\s*\\(",
        "severity": "medium",
        "recommendation": "Ensure fetch requests include credentials if needed and validate responses."
      },
      {
        "id": "JS287",
        "description": "Detect insecure usage of `fetch` with unsanitized query parameters",
        "pattern": "fetch\\s*\\([^?]*\\?[^)]+",
        "severity": "medium",
        "recommendation": "Sanitize and validate query parameters before using them with fetch to prevent injection attacks."
      },
      {
        "id": "JS288",
        "description": "Detect insecure usage of `fetch` with unsanitized JSON data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*JSON",
        "severity": "medium",
        "recommendation": "Sanitize and validate all JSON data before sending it via fetch to prevent injection attacks."
      },
      {
        "id": "JS289",
        "description": "Detect insecure usage of `fetch` with unsanitized form data",
        "pattern": "fetch\\s*\\([^,]*,\\s*\\{[^}]*body\\s*:\\s*new\\s+FormData",
        "severity": "medium",
        "recommendation": "Sanitize and validate all form data before sending it via fetch to prevent injection attacks."
      }
    ]
  }
  
